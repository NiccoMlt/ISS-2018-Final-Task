/* Generated by AN DISI Unibo */ 
package it.unibo.robot_discovery_mind;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractRobot_discovery_mind extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	//protected String mqttServer = "tcp://broker.hivemq.com:1883";
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractRobot_discovery_mind(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/robot_discovery_mind/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/robot_discovery_mind/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("home",home);
	    	stateTab.put("checkTemperatureAndExplore",checkTemperatureAndExplore);
	    	stateTab.put("startExploration",startExploration);
	    	stateTab.put("goToExploration",goToExploration);
	    	stateTab.put("resumeExploration",resumeExploration);
	    	stateTab.put("goToHandleBag",goToHandleBag);
	    	stateTab.put("handleBag",handleBag);
	    	stateTab.put("resumeExplorationAfterBag",resumeExplorationAfterBag);
	    	stateTab.put("backHomeAfterBomb",backHomeAfterBomb);
	    	stateTab.put("goToIdle",goToIdle);
	    	stateTab.put("idle",idle);
	    	stateTab.put("goToHome",goToHome);
	    	stateTab.put("doActions",doActions);
	    	stateTab.put("waitMoveCompletedAnswer",waitMoveCompletedAnswer);
	    	stateTab.put("handleCmdDone",handleCmdDone);
	    	stateTab.put("backToHome",backToHome);
	    	stateTab.put("exploreStep",exploreStep);
	    	stateTab.put("exploreUncovered",exploreUncovered);
	    	stateTab.put("handleError",handleError);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "robot_discovery_mind tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	it.unibo.planning.planUtil.initAI( myself  );
	    	//switchTo home
	        switchToPlanAsNextState(pr, myselfName, "robot_discovery_mind_"+myselfName, 
	              "home",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun home = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_home",0);
	     pr.incNumIter(); 	
	    	String myselfName = "home";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?foundBomb" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"robotHome","robotHome", guardVars ).toString();
	    	sendMsg("robotHome","console", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"robot_discovery_mind_"+myselfName,false,
	          new StateFun[]{() -> {	//AD HOC state to execute an action and resumeLastPlan
	          try{
	            PlanRepeat pr1 = PlanRepeat.setUp("adhocstate",-1);
	            //ActionSwitch for a message or event
	             if( currentEvent.getMsg().startsWith("environment") ){
	            	String parg="replaceRule(environment(X),environment(E))";
	            	parg = updateVars( Term.createTerm("environment(X)"),  Term.createTerm("environment(E)"), 
	            		    		  					Term.createTerm(currentEvent.getMsg()), parg);
	            		if( parg != null ) {
	            		    aar = QActorUtils.solveGoal(this,myCtx,pengine,parg,"",outEnvView,86400000);
	            			//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	            			if( aar.getInterrupted() ){
	            				curPlanInExec   = "home";
	            				if( aar.getTimeRemained() <= 0 ) addRule("tout(demo,"+getName()+")");
	            				if( ! aar.getGoon() ) return ;
	            			} 			
	            			if( aar.getResult().equals("failure")){
	            				if( ! aar.getGoon() ) return ;
	            			}else if( ! aar.getGoon() ) return ;
	            		}
	             }
	            repeatPlanNoTransition(pr1,"adhocstate","adhocstate",false,true);
	          }catch(Exception e ){  
	             println( getName() + " plan=home WARNING:" + e.getMessage() );
	             //QActorContext.terminateQActorSystem(this); 
	          }
	          },
	           stateTab.get("checkTemperatureAndExplore") }, 
	          new String[]{"true","E","environment", "true","M","cmdExplore" },
	          60000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_home){  
	    	 println( getName() + " plan=home WARNING:" + e_home.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//home
	    
	    StateFun checkTemperatureAndExplore = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("checkTemperatureAndExplore",-1);
	    	String myselfName = "checkTemperatureAndExplore";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?environment(ok)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmdExplore","cmdExplore", guardVars ).toString();
	    	sendMsg("cmdExplore",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"robot_discovery_mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("startExploration") }, 
	          new String[]{"true","M","cmdExplore" },
	          100, "home" );//msgTransition
	    }catch(Exception e_checkTemperatureAndExplore){  
	    	 println( getName() + " plan=checkTemperatureAndExplore WARNING:" + e_checkTemperatureAndExplore.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//checkTemperatureAndExplore
	    
	    StateFun startExploration = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("startExploration",-1);
	    	String myselfName = "startExploration";  
	    	parg = "assign(curNumExplore,0)";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	it.unibo.planning.planUtil.cleanQa( myself  );
	    	parg = "assign(nstep,0)";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	//switchTo goToExploration
	        switchToPlanAsNextState(pr, myselfName, "robot_discovery_mind_"+myselfName, 
	              "goToExploration",false, false, null); 
	    }catch(Exception e_startExploration){  
	    	 println( getName() + " plan=startExploration WARNING:" + e_startExploration.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//startExploration
	    
	    StateFun goToExploration = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("goToExploration",-1);
	    	String myselfName = "goToExploration";  
	    	{
	    	String tStr1 = "ledState(off)";
	    	String tStr2 = "ledState(blinking)";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	temporaryStr = "\"STATE[goToExploration] ...\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"robotCmd(M)","robotCmd(blinkStart)", guardVars ).toString();
	    	sendMsg("robotCmd","robot_adapter", QActorContext.dispatch, temporaryStr ); 
	    	//switchTo exploreStep
	        switchToPlanAsNextState(pr, myselfName, "robot_discovery_mind_"+myselfName, 
	              "exploreStep",false, false, null); 
	    }catch(Exception e_goToExploration){  
	    	 println( getName() + " plan=goToExploration WARNING:" + e_goToExploration.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//goToExploration
	    
	    StateFun resumeExploration = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("resumeExploration",-1);
	    	String myselfName = "resumeExploration";  
	    	temporaryStr = "\"STATE[resumeExploration] ...\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"robotCmd(M)","robotCmd(blinkStart)", guardVars ).toString();
	    	sendMsg("robotCmd","robot_adapter", QActorContext.dispatch, temporaryStr ); 
	    	//switchTo doActions
	        switchToPlanAsNextState(pr, myselfName, "robot_discovery_mind_"+myselfName, 
	              "doActions",false, false, null); 
	    }catch(Exception e_resumeExploration){  
	    	 println( getName() + " plan=resumeExploration WARNING:" + e_resumeExploration.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//resumeExploration
	    
	    StateFun goToHandleBag = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("goToHandleBag",-1);
	    	String myselfName = "goToHandleBag";  
	    	temporaryStr = "\"STATE[goToHandleBag] ...\"";
	    	println( temporaryStr );  
	    	{
	    	String tStr1 = "ledState(blinking)";
	    	String tStr2 = "ledState(off)";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"robotCmd(M)","robotCmd(blinkStop)", guardVars ).toString();
	    	sendMsg("robotCmd","robot_adapter", QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = "\"TAKE PHOTO ...\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"bag(picture(X))","bag(picture(ofBag))", guardVars ).toString();
	    	sendMsg("bag","console", QActorContext.dispatch, temporaryStr ); 
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(X,Y,D)" )) != null ){
	    	temporaryStr = "handleFixedObstacleCases_1(X,Y,D)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	it.unibo.planning.planUtil.markCellAsObstacle( myself  );
	    	it.unibo.planning.planUtil.showMap( myself  );
	    	it.unibo.systemstate.systemStateUtil.notifyUpdateState( myself  );
	    	//switchTo handleBag
	        switchToPlanAsNextState(pr, myselfName, "robot_discovery_mind_"+myselfName, 
	              "handleBag",false, false, null); 
	    }catch(Exception e_goToHandleBag){  
	    	 println( getName() + " plan=goToHandleBag WARNING:" + e_goToHandleBag.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//goToHandleBag
	    
	    StateFun handleBag = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleBag",-1);
	    	String myselfName = "handleBag";  
	    	temporaryStr = "\"STATE[handleBag] waiting for console command ...\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"robot_discovery_mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("backHomeAfterBomb"), stateTab.get("resumeExplorationAfterBag") }, 
	          new String[]{"true","M","cmdGoHome", "true","M","cmdExplore" },
	          60000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_handleBag){  
	    	 println( getName() + " plan=handleBag WARNING:" + e_handleBag.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleBag
	    
	    StateFun resumeExplorationAfterBag = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("resumeExplorationAfterBag",-1);
	    	String myselfName = "resumeExplorationAfterBag";  
	    	temporaryStr = "\"STATE[resumeExplorationAfterBag] ...\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curGoal(N,N)" )) != null ){
	    	it.unibo.planning.planUtil.setGoal( myself ,guardVars.get("N"), guardVars.get("N")  );
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curGoal(N,N)" )) != null ){
	    	it.unibo.planning.planUtil.doPlan( myself  );
	    	}
	    	//switchTo doActions
	        switchToPlanAsNextState(pr, myselfName, "robot_discovery_mind_"+myselfName, 
	              "doActions",false, false, null); 
	    }catch(Exception e_resumeExplorationAfterBag){  
	    	 println( getName() + " plan=resumeExplorationAfterBag WARNING:" + e_resumeExplorationAfterBag.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//resumeExplorationAfterBag
	    
	    StateFun backHomeAfterBomb = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("backHomeAfterBomb",-1);
	    	String myselfName = "backHomeAfterBomb";  
	    	temporaryStr = "\"STATE[backHomeAfterBomb] ...\"";
	    	println( temporaryStr );  
	    	it.unibo.planning.planUtil.markCellAsBomb( myself  );
	    	//switchTo goToHome
	        switchToPlanAsNextState(pr, myselfName, "robot_discovery_mind_"+myselfName, 
	              "goToHome",false, false, null); 
	    }catch(Exception e_backHomeAfterBomb){  
	    	 println( getName() + " plan=backHomeAfterBomb WARNING:" + e_backHomeAfterBomb.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//backHomeAfterBomb
	    
	    StateFun goToIdle = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("goToIdle",-1);
	    	String myselfName = "goToIdle";  
	    	{
	    	String tStr1 = "ledState(blinking)";
	    	String tStr2 = "ledState(off)";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	temporaryStr = "\"STATE[goToIdle] ...\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"robotCmd(M)","robotCmd(blinkStop)", guardVars ).toString();
	    	sendMsg("robotCmd","robot_adapter", QActorContext.dispatch, temporaryStr ); 
	    	//switchTo idle
	        switchToPlanAsNextState(pr, myselfName, "robot_discovery_mind_"+myselfName, 
	              "idle",false, false, null); 
	    }catch(Exception e_goToIdle){  
	    	 println( getName() + " plan=goToIdle WARNING:" + e_goToIdle.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//goToIdle
	    
	    StateFun idle = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("idle",-1);
	    	String myselfName = "idle";  
	    	//bbb
	     msgTransition( pr,myselfName,"robot_discovery_mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("resumeExploration"), stateTab.get("goToHome") }, 
	          new String[]{"true","M","cmdExplore", "true","M","cmdGoHome" },
	          60000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_idle){  
	    	 println( getName() + " plan=idle WARNING:" + e_idle.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//idle
	    
	    StateFun goToHome = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("goToHome",-1);
	    	String myselfName = "goToHome";  
	    	temporaryStr = "\"STATE[goToHome] ...\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"robotCmd(M)","robotCmd(blinkStart)", guardVars ).toString();
	    	sendMsg("robotCmd","robot_adapter", QActorContext.dispatch, temporaryStr ); 
	    	//switchTo backToHome
	        switchToPlanAsNextState(pr, myselfName, "robot_discovery_mind_"+myselfName, 
	              "backToHome",false, false, null); 
	    }catch(Exception e_goToHome){  
	    	 println( getName() + " plan=goToHome WARNING:" + e_goToHome.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//goToHome
	    
	    StateFun doActions = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_doActions",0);
	     pr.incNumIter(); 	
	    	String myselfName = "doActions";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?move(M)" )) != null ){
	    	temporaryStr = "doActions_doingTheMove(M)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " not !?move(M)" )) != null )
	    	{
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"endAction","endAction", guardVars ).toString();
	    	sendMsg("endAction",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}
	    	{
	    	String tStr1 = "moveDuration(_)";
	    	String tStr2 = "moveDuration(moveWDuration(0))";
	    	 replaceRule( tStr1, tStr2 );  
	    	 }
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?move(M)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"waitMoveCompleted","waitMoveCompleted", guardVars ).toString();
	    	sendMsg("waitMoveCompleted",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?doTheMove(M)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"robotCmd(M)","robotCmd(M)", guardVars ).toString();
	    	sendMsg("robotCmd","robot_advanced", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"robot_discovery_mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("goToIdle"), stateTab.get("goToExploration"), stateTab.get("goToHome"), stateTab.get("waitMoveCompletedAnswer"), stateTab.get("backToHome") }, 
	          new String[]{"true","M","cmdStop", "true","M","cmdExplore", "true","M","cmdGoHome", "true","M","waitMoveCompleted", "true","M","endAction" },
	          60000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_doActions){  
	    	 println( getName() + " plan=doActions WARNING:" + e_doActions.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//doActions
	    
	    StateFun waitMoveCompletedAnswer = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitMoveCompletedAnswer",-1);
	    	String myselfName = "waitMoveCompletedAnswer";  
	    	//bbb
	     msgTransition( pr,myselfName,"robot_discovery_mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleCmdDone"), stateTab.get("goToHandleBag") }, 
	          new String[]{"true","M","moveMsgCmdDone", "true","M","moveMsgCmdObstacle" },
	          60000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitMoveCompletedAnswer){  
	    	 println( getName() + " plan=waitMoveCompletedAnswer WARNING:" + e_waitMoveCompletedAnswer.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitMoveCompletedAnswer
	    
	    StateFun handleCmdDone = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleCmdDone",-1);
	    	String myselfName = "handleCmdDone";  
	    	printCurrentMessage(false);
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("moveMsgCmdDone(X)");
	    	if( currentMessage != null && currentMessage.msgId().equals("moveMsgCmdDone") && 
	    		pengine.unify(curT, Term.createTerm("moveMsgCmdDone(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		{/* JavaLikeMove */ 
	    		String arg1 = "X" ;
	    		arg1 =  updateVars( Term.createTerm("moveMsgCmdDone(X)"), Term.createTerm("moveMsgCmdDone(X)"), 
	    			                Term.createTerm(currentMessage.msgContent()),  arg1 );	                
	    		//end arg1
	    		it.unibo.planning.planUtil.doMove(this,arg1 );
	    		}
	    	}
	    	it.unibo.planning.planUtil.showMap( myself  );
	    	it.unibo.systemstate.systemStateUtil.notifyUpdateState( myself  );
	    	//bbb
	     msgTransition( pr,myselfName,"robot_discovery_mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("goToIdle") }, 
	          new String[]{"true","M","cmdStop" },
	          100, "doActions" );//msgTransition
	    }catch(Exception e_handleCmdDone){  
	    	 println( getName() + " plan=handleCmdDone WARNING:" + e_handleCmdDone.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleCmdDone
	    
	    StateFun backToHome = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("backToHome",-1);
	    	String myselfName = "backToHome";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(0,0,D)" )) != null ){
	    	{//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"robotCmd(M)","robotCmd(blinkStop)", guardVars ).toString();
	    	sendMsg("robotCmd","robot_adapter", QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = "\"AT HOME\"";
	    	println( temporaryStr );  
	    	it.unibo.planning.planUtil.showMap( myself  );
	    	it.unibo.systemstate.systemStateUtil.notifyUpdateState( myself  );
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"endAction","endAction", guardVars ).toString();
	    	sendMsg("endAction",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?foundBomb" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"robotHomeAfterBomb","robotHomeAfterBomb", guardVars ).toString();
	    	sendMsg("robotHomeAfterBomb",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}
	    	else{ temporaryStr = QActorUtils.unifyMsgContent(pengine,"endAction","endAction", guardVars ).toString();
	    	sendMsg("endAction",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}};//actionseq
	    	}
	    	else{ {//actionseq
	    	it.unibo.planning.planUtil.setGoal( myself ,"0", "0"  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(X,Y,D)" )) != null ){
	    	temporaryStr = "backToHome(X,Y,D)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	it.unibo.planning.planUtil.doPlan( myself  );
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"robot_discovery_mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("exploreStep"), stateTab.get("home") }, 
	          new String[]{"true","M","endAction", "true","M","robotHomeAfterBomb" },
	          100, "doActions" );//msgTransition
	    }catch(Exception e_backToHome){  
	    	 println( getName() + " plan=backToHome WARNING:" + e_backToHome.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//backToHome
	    
	    StateFun exploreStep = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("exploreStep",-1);
	    	String myselfName = "exploreStep";  
	    	temporaryStr = "state(exploreStep)";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(X,Y,D)" )) != null ){
	    	temporaryStr = "exploreStep(X,Y,D)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?continueExplore(N)" )) != null ){
	    	{//actionseq
	    	it.unibo.planning.planUtil.extendSpaceToexplore( myself  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?getVal(curNumExplore,E)" )) != null ){
	    	it.unibo.planning.planUtil.setGoal( myself ,guardVars.get("E"), guardVars.get("E")  );
	    	}
	    	it.unibo.planning.planUtil.doPlan( myself  );
	    	};//actionseq
	    	}
	    	else{ {//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"endAction","endAction", guardVars ).toString();
	    	sendMsg("endAction",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"robot_discovery_mind_"+myselfName,false,
	          new StateFun[]{stateTab.get("exploreUncovered") }, 
	          new String[]{"true","M","endAction" },
	          1000, "doActions" );//msgTransition
	    }catch(Exception e_exploreStep){  
	    	 println( getName() + " plan=exploreStep WARNING:" + e_exploreStep.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//exploreStep
	    
	    StateFun exploreUncovered = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("exploreUncovered",-1);
	    	String myselfName = "exploreUncovered";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?curPos(X,Y,D)" )) != null ){
	    	temporaryStr = "exploreUncovered(X,Y,D)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	it.unibo.planning.planUtil.showMap( myself  );
	    	it.unibo.systemstate.systemStateUtil.notifyUpdateState( myself  );
	    	it.unibo.planning.planUtil.findNextCellUncovered( myself  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?uncovered(X,Y)" )) != null ){
	    	temporaryStr = "uncovered(X,Y)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?uncovered(X,Y)" )) != null ){
	    	it.unibo.planning.planUtil.setGoal( myself ,guardVars.get("X"), guardVars.get("Y")  );
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??uncovered(X,Y)" )) != null ){
	    	it.unibo.planning.planUtil.doPlan( myself  );
	    	}
	    	else{ temporaryStr = QActorUtils.unifyMsgContent(pengine,"endAction","endAction", guardVars ).toString();
	    	sendMsg("endAction",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}debugStep();
	    	//bbb
	     msgTransition( pr,myselfName,"robot_discovery_mind_"+myselfName,false,
	          new StateFun[]{() -> {	//AD HOC state to execute an action and resumeLastPlan
	          try{
	            PlanRepeat pr1 = PlanRepeat.setUp("adhocstate",-1);
	            //ActionSwitch for a message or event
	             if( currentMessage.msgContent().startsWith("endAction") ){
	            	String parg = "\"bye\"";
	            	/* Print */
	            	parg =  updateVars( Term.createTerm("endAction"), 
	            	                 Term.createTerm("endAction"), 
	            		    		 Term.createTerm(currentMessage.msgContent()), parg);
	            	if( parg != null ) println( parg );
	             }
	            repeatPlanNoTransition(pr1,"adhocstate","adhocstate",false,true);
	          }catch(Exception e ){  
	             println( getName() + " plan=exploreUncovered WARNING:" + e.getMessage() );
	             //QActorContext.terminateQActorSystem(this); 
	          }
	          }
	          }, 
	          new String[]{"true","M","endAction" },
	          100, "doActions" );//msgTransition
	    }catch(Exception e_exploreUncovered){  
	    	 println( getName() + " plan=exploreUncovered WARNING:" + e_exploreUncovered.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//exploreUncovered
	    
	    StateFun handleError = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleError",-1);
	    	String myselfName = "handleError";  
	    	temporaryStr = "\"mind ERROR\"";
	    	println( temporaryStr );  
	    	repeatPlanNoTransition(pr,myselfName,"robot_discovery_mind_"+myselfName,false,false);
	    }catch(Exception e_handleError){  
	    	 println( getName() + " plan=handleError WARNING:" + e_handleError.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleError
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
