/* Generated by AN DISI Unibo */ 
package it.unibo.onecellforward;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractOnecellforward extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	//protected String mqttServer = "";
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractOnecellforward(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/onecellforward/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/onecellforward/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("startWork",startWork);
	    	stateTab.put("probableFixedObstacle",probableFixedObstacle);
	    	stateTab.put("consumePendingCollisions",consumePendingCollisions);
	    	stateTab.put("sendAnswerAfterCollision",sendAnswerAfterCollision);
	    	stateTab.put("endMoveForward",endMoveForward);
	    	stateTab.put("handleStop",handleStop);
	    	stateTab.put("handleError",handleError);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "onecellforward tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	//bbb
	     msgTransition( pr,myselfName,"onecellforward_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleStop"), stateTab.get("startWork") }, 
	          new String[]{"true","M","cmdStop", "true","M","moveMsgCmd" },
	          600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun startWork = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("startWork",-1);
	    	String myselfName = "startWork";  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("moveMsgCmd(TF)");
	    	if( currentMessage != null && currentMessage.msgId().equals("moveMsgCmd") && 
	    		pengine.unify(curT, Term.createTerm("moveMsgCmd(TF)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		/* replaceRule */
	    		String parg1="timew(_)"; 
	    		String parg2="timew(TF)"; 
	    		parg1 = updateVars( Term.createTerm("moveMsgCmd(TF)"),  Term.createTerm("moveMsgCmd(TF)"), 
	    			    		  			Term.createTerm(currentMessage.msgContent()), parg1);
	    		parg2 = updateVars( Term.createTerm("moveMsgCmd(TF)"),  Term.createTerm("moveMsgCmd(TF)"), 
	    			    		  			Term.createTerm(currentMessage.msgContent()), parg2);
	    		replaceRule(parg1,parg2);
	    	}
	    	storeCurrentMessageForReply();
	    	it.unibo.utils.movePlanUtil.startTimer( myself  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?timew(T)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"robotCmd(M,T)","robotCmd(w,T)", guardVars ).toString();
	    	sendMsg("robotAdapterCmd","robot_adapter", QActorContext.dispatch, temporaryStr ); 
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"onecellforward_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleStop"), stateTab.get("probableFixedObstacle") }, 
	          new String[]{"true","M","cmdStop", "true","M","collisionDispatch" },
	          255, "endMoveForward" );//msgTransition
	    }catch(Exception e_startWork){  
	    	 println( getName() + " plan=startWork WARNING:" + e_startWork.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//startWork
	    
	    StateFun probableFixedObstacle = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("probableFixedObstacle",-1);
	    	String myselfName = "probableFixedObstacle";  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"robotCmd(M,T)","robotCmd(h,0)", guardVars ).toString();
	    	sendMsg("robotAdapterCmd","robot_adapter", QActorContext.dispatch, temporaryStr ); 
	    	it.unibo.utils.movePlanUtil.getDuration( myself  );
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?moveWDuration(T)" )) != null ){
	    	temporaryStr = "onecellforward_probableFixedObstacle(T)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"obstacleNear","obstacleNear", guardVars ).toString();
	    	sendMsg("obstacleNear",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	//switchTo consumePendingCollisions
	        switchToPlanAsNextState(pr, myselfName, "onecellforward_"+myselfName, 
	              "consumePendingCollisions",false, false, null); 
	    }catch(Exception e_probableFixedObstacle){  
	    	 println( getName() + " plan=probableFixedObstacle WARNING:" + e_probableFixedObstacle.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//probableFixedObstacle
	    
	    StateFun consumePendingCollisions = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("consumePendingCollisions",-1);
	    	String myselfName = "consumePendingCollisions";  
	    	temporaryStr = "\"onecellforward_consumePendingCollisions: (a physical sonar should ...)\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"onecellforward_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleStop"), stateTab.get("consumePendingCollisions"), stateTab.get("sendAnswerAfterCollision") }, 
	          new String[]{"true","M","cmdStop", "true","M","collisionDispatch", "true","M","obstacleNear" },
	          3000, "handleError" );//msgTransition
	    }catch(Exception e_consumePendingCollisions){  
	    	 println( getName() + " plan=consumePendingCollisions WARNING:" + e_consumePendingCollisions.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//consumePendingCollisions
	    
	    StateFun sendAnswerAfterCollision = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("sendAnswerAfterCollision",-1);
	    	String myselfName = "sendAnswerAfterCollision";  
	    	temporaryStr = "\"onecellforward sendAnswerAfterCollision\"";
	    	println( temporaryStr );  
	    	ignoreCurrentCaller();
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??moveWDuration(T)" )) != null ){
	    	temporaryStr = "moveMsgCmdObstacle(moveWDuration(T))";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr );
	    	replyToCaller("moveMsgCmdObstacle", temporaryStr);
	    	}
	    	//switchTo init
	        switchToPlanAsNextState(pr, myselfName, "onecellforward_"+myselfName, 
	              "init",false, false, null); 
	    }catch(Exception e_sendAnswerAfterCollision){  
	    	 println( getName() + " plan=sendAnswerAfterCollision WARNING:" + e_sendAnswerAfterCollision.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//sendAnswerAfterCollision
	    
	    StateFun endMoveForward = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("endMoveForward",-1);
	    	String myselfName = "endMoveForward";  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"robotCmd(M,T)","robotCmd(h,0)", guardVars ).toString();
	    	sendMsg("robotAdapterCmd","robot_adapter", QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = "moveMsgCmdDone(w)";
	    	replyToCaller("moveMsgCmdDone", temporaryStr);
	    	//switchTo init
	        switchToPlanAsNextState(pr, myselfName, "onecellforward_"+myselfName, 
	              "init",false, false, null); 
	    }catch(Exception e_endMoveForward){  
	    	 println( getName() + " plan=endMoveForward WARNING:" + e_endMoveForward.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//endMoveForward
	    
	    StateFun handleStop = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleStop",-1);
	    	String myselfName = "handleStop";  
	    	temporaryStr = "\"onecellforward: robot STOPPED: no reply to the caller\"";
	    	println( temporaryStr );  
	    	repeatPlanNoTransition(pr,myselfName,"onecellforward_"+myselfName,false,false);
	    }catch(Exception e_handleStop){  
	    	 println( getName() + " plan=handleStop WARNING:" + e_handleStop.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleStop
	    
	    StateFun handleError = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleError",-1);
	    	String myselfName = "handleError";  
	    	temporaryStr = "\"onecellforward ERROR\"";
	    	println( temporaryStr );  
	    	repeatPlanNoTransition(pr,myselfName,"onecellforward_"+myselfName,false,false);
	    }catch(Exception e_handleError){  
	    	 println( getName() + " plan=handleError WARNING:" + e_handleError.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleError
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
