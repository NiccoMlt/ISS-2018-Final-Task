/* Generated by AN DISI Unibo */ 
package it.unibo.console;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractConsole extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	//protected String mqttServer = "tcp://127.0.0.1:1883";
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractConsole(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/console/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/console/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("doWork",doWork);
	    	stateTab.put("adaptCommand",adaptCommand);
	    	stateTab.put("storeEnvironment",storeEnvironment);
	    	stateTab.put("handlePhoto",handlePhoto);
	    	stateTab.put("handleBagStatus",handleBagStatus);
	    	stateTab.put("handleAlert",handleAlert);
	    	stateTab.put("startRetrieval",startRetrieval);
	    	stateTab.put("updateView",updateView);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "console tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(2000,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "init";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = "\"Console init\"";
	    	println( temporaryStr );  
	    	//ConnectToSubscribe
	    	connectAndSubscribe( this.getName(), "tcp://127.0.0.1:1883", "unibo/frontendUserCmd");
	    	//switchTo doWork
	        switchToPlanAsNextState(pr, myselfName, "console_"+myselfName, 
	              "doWork",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun doWork = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_doWork",0);
	     pr.incNumIter(); 	
	    	String myselfName = "doWork";  
	    	//bbb
	     msgTransition( pr,myselfName,"console_"+myselfName,false,
	          new StateFun[]{stateTab.get("adaptCommand"), stateTab.get("storeEnvironment"), stateTab.get("updateView"), stateTab.get("handlePhoto") }, 
	          new String[]{"true","E","frontendUserCmd", "true","E","environment", "true","M","stateUpdate", "true","M","bag" },
	          60000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_doWork){  
	    	 println( getName() + " plan=doWork WARNING:" + e_doWork.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//doWork
	    
	    StateFun adaptCommand = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("adaptCommand",-1);
	    	String myselfName = "adaptCommand";  
	    	printCurrentEvent(false);
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("frontendUserCmd(cmd(explore))");
	    	if( currentEvent != null && currentEvent.getEventId().equals("frontendUserCmd") && 
	    		pengine.unify(curT, Term.createTerm("frontendUserCmd(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="cmdExplore";
	    			/* SendDispatch */
	    			parg = updateVars(Term.createTerm("frontendUserCmd(X)"),  Term.createTerm("frontendUserCmd(cmd(explore))"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) sendMsg("cmdExplore","robot_discovery_mind", QActorContext.dispatch, parg ); 
	    	}
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("frontendUserCmd(cmd(retrieve))");
	    	if( currentEvent != null && currentEvent.getEventId().equals("frontendUserCmd") && 
	    		pengine.unify(curT, Term.createTerm("frontendUserCmd(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="cmdReachBomb";
	    			/* SendDispatch */
	    			parg = updateVars(Term.createTerm("frontendUserCmd(X)"),  Term.createTerm("frontendUserCmd(cmd(retrieve))"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) sendMsg("cmdReachBomb","robot_retriever_mind", QActorContext.dispatch, parg ); 
	    	}
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("frontendUserCmd(cmd(halt))");
	    	if( currentEvent != null && currentEvent.getEventId().equals("frontendUserCmd") && 
	    		pengine.unify(curT, Term.createTerm("frontendUserCmd(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="cmdStop";
	    			/* SendDispatch */
	    			parg = updateVars(Term.createTerm("frontendUserCmd(X)"),  Term.createTerm("frontendUserCmd(cmd(halt))"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) sendMsg("cmdStop","robot_discovery_mind", QActorContext.dispatch, parg ); 
	    	}
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("frontendUserCmd(cmd(home))");
	    	if( currentEvent != null && currentEvent.getEventId().equals("frontendUserCmd") && 
	    		pengine.unify(curT, Term.createTerm("frontendUserCmd(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="cmdGoHome";
	    			/* SendDispatch */
	    			parg = updateVars(Term.createTerm("frontendUserCmd(X)"),  Term.createTerm("frontendUserCmd(cmd(home))"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) sendMsg("cmdGoHome","robot_discovery_mind", QActorContext.dispatch, parg ); 
	    	}
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("frontendUserCmd(bagStatus(bomb))");
	    	if( currentEvent != null && currentEvent.getEventId().equals("frontendUserCmd") && 
	    		pengine.unify(curT, Term.createTerm("frontendUserCmd(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="bagStatus(bomb)";
	    			/* SendDispatch */
	    			parg = updateVars(Term.createTerm("frontendUserCmd(X)"),  Term.createTerm("frontendUserCmd(bagStatus(bomb))"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) sendMsg("bagStatus",getNameNoCtrl(), QActorContext.dispatch, parg ); 
	    	}
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("frontendUserCmd(bagStatus(bag))");
	    	if( currentEvent != null && currentEvent.getEventId().equals("frontendUserCmd") && 
	    		pengine.unify(curT, Term.createTerm("frontendUserCmd(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="bagStatus(bag)";
	    			/* SendDispatch */
	    			parg = updateVars(Term.createTerm("frontendUserCmd(X)"),  Term.createTerm("frontendUserCmd(bagStatus(bag))"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) sendMsg("bagStatus",getNameNoCtrl(), QActorContext.dispatch, parg ); 
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"console_"+myselfName,false,true);
	    }catch(Exception e_adaptCommand){  
	    	 println( getName() + " plan=adaptCommand WARNING:" + e_adaptCommand.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//adaptCommand
	    
	    StateFun storeEnvironment = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("storeEnvironment",-1);
	    	String myselfName = "storeEnvironment";  
	    	printCurrentEvent(false);
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("environment(notok)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("environment") && 
	    		pengine.unify(curT, Term.createTerm("environment(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="state(messageDanger,\"Environment adverse - temperature too hot!\")";
	    			/* SendDispatch */
	    			parg = updateVars(Term.createTerm("environment(X)"),  Term.createTerm("environment(notok)"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) sendMsg("stateUpdate",getNameNoCtrl(), QActorContext.dispatch, parg ); 
	    	}
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("environment(ok)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("environment") && 
	    		pengine.unify(curT, Term.createTerm("environment(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="state(messageInfo,\"Environment condition is safe.\")";
	    			/* SendDispatch */
	    			parg = updateVars(Term.createTerm("environment(X)"),  Term.createTerm("environment(ok)"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) sendMsg("stateUpdate",getNameNoCtrl(), QActorContext.dispatch, parg ); 
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"console_"+myselfName,false,true);
	    }catch(Exception e_storeEnvironment){  
	    	 println( getName() + " plan=storeEnvironment WARNING:" + e_storeEnvironment.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//storeEnvironment
	    
	    StateFun handlePhoto = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_handlePhoto",0);
	     pr.incNumIter(); 	
	    	String myselfName = "handlePhoto";  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("bag(picture(X))");
	    	if( currentMessage != null && currentMessage.msgId().equals("bag") && 
	    		pengine.unify(curT, Term.createTerm("bag(picture(X))")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="state(picture,X)";
	    		/* SendDispatch */
	    		parg = updateVars(Term.createTerm("bag(picture(X))"),  Term.createTerm("bag(picture(X))"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) sendMsg("stateUpdate",getNameNoCtrl(), QActorContext.dispatch, parg ); 
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("bag(picture(X))");
	    	if( currentMessage != null && currentMessage.msgId().equals("bag") && 
	    		pengine.unify(curT, Term.createTerm("bag(picture(X))")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		/* replaceRule */
	    		String parg1="picture(_)"; 
	    		String parg2="picture(X)"; 
	    		parg1 = updateVars( Term.createTerm("bag(picture(X))"),  Term.createTerm("bag(picture(X))"), 
	    			    		  			Term.createTerm(currentMessage.msgContent()), parg1);
	    		parg2 = updateVars( Term.createTerm("bag(picture(X))"),  Term.createTerm("bag(picture(X))"), 
	    			    		  			Term.createTerm(currentMessage.msgContent()), parg2);
	    		replaceRule(parg1,parg2);
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"console_"+myselfName,false,
	          new StateFun[]{stateTab.get("updateView"), stateTab.get("handleBagStatus"), stateTab.get("adaptCommand") }, 
	          new String[]{"true","M","stateUpdate", "true","M","bagStatus", "true","E","frontendUserCmd" },
	          60000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_handlePhoto){  
	    	 println( getName() + " plan=handlePhoto WARNING:" + e_handlePhoto.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handlePhoto
	    
	    StateFun handleBagStatus = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleBagStatus",-1);
	    	String myselfName = "handleBagStatus";  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("bagStatus(bomb)");
	    	if( currentMessage != null && currentMessage.msgId().equals("bagStatus") && 
	    		pengine.unify(curT, Term.createTerm("bagStatus(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		//println("WARNING: variable substitution not yet fully implemented " ); 
	    		{//actionseq
	    		{
	    		String tStr1 = "picture(X)";
	    		String tStr2 = "pictureBomb(X)";
	    		 replaceRule( tStr1, tStr2 );  
	    		 }
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmdGoHome","cmdGoHome", guardVars ).toString();
	    		sendMsg("cmdGoHome","robot_discovery_mind", QActorContext.dispatch, temporaryStr ); 
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine,"alert","alert", guardVars ).toString();
	    		sendMsg("alert",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    		};//actionseq
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("bagStatus(bag)");
	    	if( currentMessage != null && currentMessage.msgId().equals("bagStatus") && 
	    		pengine.unify(curT, Term.createTerm("bagStatus(X)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="cmdExplore";
	    		/* SendDispatch */
	    		parg = updateVars(Term.createTerm("bagStatus(X)"),  Term.createTerm("bagStatus(bag)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) sendMsg("cmdExplore","robot_discovery_mind", QActorContext.dispatch, parg ); 
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"console_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleAlert") }, 
	          new String[]{"true","M","alert" },
	          3000, "doWork" );//msgTransition
	    }catch(Exception e_handleBagStatus){  
	    	 println( getName() + " plan=handleBagStatus WARNING:" + e_handleBagStatus.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleBagStatus
	    
	    StateFun handleAlert = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_handleAlert",0);
	     pr.incNumIter(); 	
	    	String myselfName = "handleAlert";  
	    	//bbb
	     msgTransition( pr,myselfName,"console_"+myselfName,false,
	          new StateFun[]{stateTab.get("startRetrieval"), stateTab.get("updateView") }, 
	          new String[]{"true","M","robotHome", "true","M","stateUpdate" },
	          60000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_handleAlert){  
	    	 println( getName() + " plan=handleAlert WARNING:" + e_handleAlert.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleAlert
	    
	    StateFun startRetrieval = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("startRetrieval",-1);
	    	String myselfName = "startRetrieval";  
	    	it.unibo.utils.updateStateOnRobot.sendMap( myself  );
	    	it.unibo.utils.updateStateOnConsole.updateRobotState( myself ,"retriever-home"  );
	    	//bbb
	     msgTransition( pr,myselfName,"console_"+myselfName,false,
	          new StateFun[]{}, 
	          new String[]{},
	          1000, "doWork" );//msgTransition
	    }catch(Exception e_startRetrieval){  
	    	 println( getName() + " plan=startRetrieval WARNING:" + e_startRetrieval.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//startRetrieval
	    
	    StateFun updateView = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("updateView",-1);
	    	String myselfName = "updateView";  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("state(T,P)");
	    	if( currentMessage != null && currentMessage.msgId().equals("stateUpdate") && 
	    		pengine.unify(curT, Term.createTerm("state(T,P)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		{/* JavaLikeMove */ 
	    		String arg1 = "T" ;
	    		arg1 =  updateVars( Term.createTerm("state(T,P)"), Term.createTerm("state(T,P)"), 
	    			                Term.createTerm(currentMessage.msgContent()),  arg1 );	                
	    		//end arg1
	    		String arg2 = "P" ;
	    		arg2 =  updateVars( Term.createTerm("state(T,P)"), Term.createTerm("state(T,P)"), 
	    			                Term.createTerm(currentMessage.msgContent()),  arg2 );	                
	    		//end arg2
	    		it.unibo.utils.updateStateOnConsole.receivedUpdateState(this,arg1,arg2 );
	    		}
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"console_"+myselfName,false,true);
	    }catch(Exception e_updateView){  
	    	 println( getName() + " plan=updateView WARNING:" + e_updateView.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//updateView
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
