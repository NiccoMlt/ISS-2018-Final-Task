System robot

/*
 * *********************************************************
 * Messaggi & Eventi Ambiente
 * *********************************************************
 */
 
/** X = ok | notok */
Event environment: environment(X)

/** X = temperature (°C) */
Event temperature: temperature(X)

/*
 * *********************************************************
 * Messaggi & Eventi Robot Adapter
 * *********************************************************
 */
 
/** T = Type ; A = args */
Dispatch robotAdapterAdd: robot(T, A)
/** M=w|a|s|d|h  T:(int) duration */
Dispatch robotAdapterCmd: robotCmd(M,T)

/** Comando al robot ; X = w|a|s|d|h */
Dispatch robotCmd: robotCmd(M)

/*
 * ---------------------------------------------------------------------------------
 * Robot-one-cell-forward
 * ---------------------------------------------------------------------------------
 */
Dispatch collisionDispatch: obstacle(TARGET)
Dispatch obstacleNear: obstacleNear
Dispatch moveMsgCmd: moveMsgCmd(TF)  
Dispatch moveMsgCmdDone: moveMsgCmdDone(X) //X=cmd
Dispatch moveMsgCmdObstacle: moveMsgCmdObstacle(X) //X=

/*
 * ---------------------------------------------------------------------------------
 * Robot-advanced
 * ---------------------------------------------------------------------------------
 */
Dispatch waitMoveCompleted   : waitMoveCompleted

/*
 * ---------------------------------------------------------------------------------
 * Planner
 * ---------------------------------------------------------------------------------
 */
Dispatch endAction     : endAction 

/*
 * Robot position
 */
Event robotSonar: robotSonar(distance(X))                                           // X = distance
Event robotSonarObstacle: obstacle(X)                                               // From robot virtual sonar obstacle; X = name
// Event robotSonarWall: sonar(SONAR, TARGET, DISTANCE)                             // sonar fisico

/*
 * *********************************************************
 * Messaggi & Eventi Mind
 * *********************************************************
 */

Dispatch cmdStop: cmdStop                                               // R-stopAtBag & R-stopExplore
Dispatch cmdGoHome: cmdGoHome                                           // R-backHome
Dispatch cmdExplore: cmdExplore                                         // R-explore
Dispatch cmdReachBomb: cmdReachBomb                                     // R-reachBag

/** X = halt|takePhoto */
Dispatch handleBag: handleBag(X)                                        // R-stopAtBag & R-takePhoto

/** X = photo */
Dispatch bag: bag(picture(X))                                           // R-sendPhoto & R-storePhoto

/*
 * *********************************************************
 * Messaggi & Eventi Console
 * *********************************************************
 */
Dispatch alert: alert                                                   // R-alert
/** X = bomb|bag ; Y = arguments */
Dispatch bagStatus: bagStatus(X, args(Y))

/** (X,Y) = coordinates ; M = w|a|s|d|h */
Event robotState: state(position(X,Y), movement(M))                     // R-consoleUpdate
Dispatch robotHome: robotHome
Dispatch robotNearBag: robotNearBag

/** X=robotgui(CMD) CMD=s(low) ; from robot GUI */
Event usercmd: usercmd(X)

/** Contesto locale del robot. Console web a localhost:8080 */
Context ctxRobot ip [ host="localhost" port=8079 ] -httpserver

// Handler sonar virtuale TODO (manca per il fisico) 
EventHandler collisionevh for robotSonarObstacle -print  {   
    forwardEvent onecellforward -m collisionDispatch
};

/** Attore che osserva l'ambiente e valuta la temperatura. */
QActor world_observer context ctxRobot {

    Rules {
        // Impostazioni di default:
        temperature(18).
        // Regole di valutazione:
        evaluateTemp :- temperature(X), eval(lt, X, 25).                // R-TempOk
        // Regola di valutazione complessiva:
        evaluateEnvironment :- evaluateTemp.
    }
    
    /** Lo stato doObserve è lo stato nel quale viene verificata la temperatura. */
    State doObserve initial [
        [ !? evaluateEnvironment ] 
            emit environment: environment(ok)
        else 
            emit environment: environment(notok)
    ] transition
        whenTime 1000 -> doObserve
        whenEvent temperature: temperature(X) do
            ReplaceRule temperature(Z) with temperature(X)              // R-TempOk
        finally repeatPlan
}

/** Attore che modella un robot. */
QActor robot_adapter context ctxRobot {
    
    Rules {
//      robotType("robotSerial", setuparg("/dev/ttyACM0")).
//      robotType("robotVirtual", setuparg("localhost")).
      robotType("robotDemo", setuparg("")).
    }

    /** Stato iniziale del Robot Adapter. */
    State init initial [

    ] transition
        whenTime 100 -> initRobots
    
    /** Stato di inizializzazione degli Executor del Robot Adapter. */
    State initRobots [
        [ ?? robotType(T, setuparg(A)) ] selfMsg robotAdapterAdd: robot(T, A)
    ] transition
        whenTime 2000 -> doWork
        whenMsg robotAdapterAdd: robot(T,A) do 
            javaRun it.unibo.robot_adapter.robots.setUp(T, A)
        finally repeatPlan

    /** 
     * Stato effettivo di lavoro. 
     * 
     * Esegue i comandi provenienti da messaggi ed eventi.
     */
    State doWork [

    ] transition
        stopAfter 60000
        whenMsg robotCmd -> executeCommand,
        whenMsg robotAdapterCmd -> executeCommand
        finally repeatPlan

    /** Stato di interpretazione comandi. */
    State executeCommand resumeLastPlan [
        onMsg robotCmd: robotCmd(X) -> 
            javaRun it.unibo.robot_adapter.robots.doMove(X);
        onMsg robotAdapterCmd: robotCmd(X, T) -> 
            javaRun it.unibo.robot_adapter.robots.doMove(X, T)
    ]
}

/*
 * ----------------------------------------------------------
 * onecellforward : moves the robot ahead of one cell
 * ----------------------------------------------------------
 */
QActor onecellforward context ctxRobot {
    
    Rules{
        timew(10). //set by moveMsgCmd
        moveTimeInfo(timew(TF),moveWDuration(TD)) :- timew(TF),moveWDuration(TD).
    }
    
    State init initial [
    ]
    transition stopAfter 600000
        whenMsg cmdStop -> handleStop,  //first to be checked
        whenMsg moveMsgCmd -> startWork

    State startWork[
        onMsg moveMsgCmd: moveMsgCmd(TF) ->
            ReplaceRule timew(_) with timew(TF);
        //SAVE THE CURRENT MESSAGE. the currentMessage is lost when the state changes
        javaOp "storeCurrentMessageForReply()";  //used by replyToCaller
        //[!? timew( T )] println(doMoveForward_timeForForward(T));
        javaRun it.unibo.utils.movePlanUtil.startTimer();
        [ !? timew(T) ] forward robot_adapter -m robotAdapterCmd: robotCmd(w,T)
    ] transition
        //transition [ !? timew(T) ] whenTime T -> endMoveForward
        whenTime 255 -> endMoveForward                      //asynch
        whenMsg cmdStop -> handleStop,                      //first to be checked
        whenMsg collisionDispatch -> probableFixedObstacle  //NO MOBILE OBSTACLES

    State probableFixedObstacle[ 
        forward robot_adapter -m robotAdapterCmd: robotCmd(h,0);
        javaRun it.unibo.utils.movePlanUtil.getDuration();
        [ !? moveWDuration(T) ] println(onecellforward_probableFixedObstacle(T));
        selfMsg obstacleNear: obstacleNear
    ]
    switchTo consumePendingCollisions

    State consumePendingCollisions [
        println("onecellforward_consumePendingCollisions: (a physical sonar should ...)")
    ]
    transition
        whenTime 3000 -> handleError
        whenMsg cmdStop -> handleStop,      //first to be checked
        whenMsg collisionDispatch -> consumePendingCollisions,
        whenMsg obstacleNear -> sendAnswerAfterCollision

    State sendAnswerAfterCollision[ //obstacle far has duration negative
        println("onecellforward sendAnswerAfterCollision");
        javaOp "ignoreCurrentCaller()"; //set currentMessage = null;
        [ ?? moveWDuration(T) ] //reply to the saved caller
            replyToCaller -m moveMsgCmdObstacle : moveMsgCmdObstacle(moveWDuration(T))
    ]
    switchTo init 
    
    State endMoveForward[ 
        forward robot_adapter -m robotAdapterCmd: robotCmd(h,0);
        //      javaRun it.unibo.utils.movePlanUtil.getDuration();
//      [ !? moveTimeInfo(TF,TD)] replyToCaller -m moveMsgCmdDone: moveMsgCmdDone(w)
        replyToCaller -m moveMsgCmdDone: moveMsgCmdDone(w)
    ]
    switchTo init 

    State handleStop[ println("onecellforward: robot STOPPED: no reply to the caller") ]
    State handleError[ println("onecellforward ERROR") ]
}

QActor robot_advanced context ctxRobot {
    
    Rules {
        timew(255).
        timeTurn(500).
    }
    
    State init initial [
        
    ] switchTo doWork
    
    State doWork [
        
    ] transition
        stopAfter 60000
        whenMsg robotCmd -> executeCommand
    
    State executeCommand [
        //SAVE THE CURRENT MESSAGE. the currentMessage is lost when the state changes
        javaOp "storeCurrentMessageForReply()";  //used by replyToCaller
        onMsg robotCmd: robotCmd(a) -> {
            [ !? timeTurn(T) ] forward robot_adapter -m robotAdapterCmd: robotCmd(a,T);
            selfMsg waitMoveCompleted: waitMoveCompleted
        };
        onMsg robotCmd: robotCmd(d) -> {
            [ !? timeTurn(T) ] forward robot_adapter -m robotAdapterCmd: robotCmd(d,T);
            selfMsg waitMoveCompleted: waitMoveCompleted
        };
        onMsg robotCmd: robotCmd(w) -> {
            //attempt to move
            [ !? timew(T) ] forward onecellforward -m moveMsgCmd : moveMsgCmd(T);
            selfMsg waitMoveCompleted: waitMoveCompleted
        }
    ] transition
        whenTime 100 -> doWork
        whenMsg waitMoveCompleted -> waitMoveComletedAnswer

    State waitMoveComletedAnswer [
    ] transition
        stopAfter 60000
        whenMsg moveMsgCmdDone -> receivedMoveCompletedAnswer,
        whenMsg moveMsgCmdObstacle -> receivedMoveCompletedAnswer
    
    State receivedMoveCompletedAnswer [
        onMsg moveMsgCmdDone: moveMsgCmdDone(X) -> 
            replyToCaller -m moveMsgCmdDone: moveMsgCmdDone(X);
        onMsg moveMsgCmdObstacle: moveMsgCmdObstacle(moveWDuration(T)) ->
            forward robot_adapter -m robotAdapterCmd: robotCmd(s, T);                //BACK (to COMPENSATE)
        onMsg moveMsgCmdObstacle: moveMsgCmdObstacle(moveWDuration(T)) ->
            replyToCaller -m moveMsgCmdObstacle: moveMsgCmdObstacle(moveWDuration(T))
    ] switchTo doWork
}

/** Attore che modella la mente del robot discovery, separata dal robot fisico. */
QActor robot_discovery_mind context ctxRobot {
    
    Rules {
        environment(notok).
        /** ledState(X) ; X = off|blinking */
        ledState(off).
        
        // PLANNER
        numOfExplorations(3).   
        curGoal(0,0).   
        
        continueForward(T) :-  timew(T),  inc(repeatForward,1,R), getVal( nstep,N ),
                        output(continueForward( R,N,T )), eval( lt, R, N ).                          
        continueExplore(V)  :- numOfExplorations(MAX), inc(curNumExplore,1,V), 
                output(continueExplore( V,MAX )),eval( le, V, MAX ),
                replaceRule( curGoal(_,_), curGoal(V,V) ).  
        continueExplore(V) :- removeeRule( curGoal(_,_) ).          
         
        //----------------------------------
        eval( eq, X, X ).       //since we have syntax limitations
        doTheMove(M) :-  //moveDone does not exist: we can goon
            move(M1), !, //M1 is the first move to do
            eval(eq,M,M1), !,
            doTheFirstMove(M). 
            
        doTheFirstMove(w) :- retract( move(w) ),!.              
        doTheFirstMove(a) :- retract( move(a) ),!.
        doTheFirstMove(d) :- retract( move(d) ),!.
    }
    
    State init initial [
        // Planner
        javaRun it.unibo.planning.planUtil.initAI()
    ] switchTo home

    /**
     * Lo stato home è lo stato iniziale della mind del robot.
     *
     * Attende per 60s di ricevere un comando o un evento:
     * - riguardante l'ambiente,
     * - per iniziare l'esplorazione.
     */
    State home [
        onMsg robotHome: robotHome -> forward console -m robotHome: robotHome
    ] transition
        stopAfter 60000
        whenEvent environment: environment(E) do
            demo replaceRule(environment(X), environment(E)),
        whenMsg cmdExplore -> checkTemperatureAndExplore                            // R-explore & R-TempOk
        finally repeatPlan
    
    State checkTemperatureAndExplore [                                              // R-TempOk
        [ !? environment(ok) ] selfMsg cmdExplore: cmdExplore
    ] transition
        whenTime 100 -> home
        whenMsg cmdExplore -> goToExploration

    /**
     * Lo stato goToExploration è lo stato che precede l'inizio dell'esplorazione.
     *
     * La mind abilita il lampeggio del LED sul robot e inizia ad esplorare.
     */
    State goToExploration [
        ReplaceRule ledState(off) with ledState(blinking);
        println("EXPLORING ...");
        forward robot_adapter -m robotCmd: robotCmd(blinkStart);                    // R-blinkLed (start)
        // Planner
        demo assign(curNumExplore, 0); 
        javaRun it.unibo.planning.planUtil.cleanQa();
        demo assign(nstep, 0)
    ] switchTo exploreStep // TODO switchTo exploration

    // TODO remove?!
    /**
     * Lo stato exploration è lo stato più importante per la fase di discovery.
     *
     * Mentre il robot esplora, la mind gestisce eventuali comandi o borse vicine.
     */
    State exploration [
        // TODO implement logic ***
        println("EXPLORING ...")//;                                        // R-consoleUpdate
//        forward robot_advanced -m robotCmd: robotCmd(a);
//        forward robot_advanced -m robotCmd: robotCmd(w);
//        forward robot_advanced -m robotCmd: robotCmd(d);
//        forward robot_advanced -m robotCmd: robotCmd(d);
//        forward robot_advanced -m robotCmd: robotCmd(w)
        // ************************
    ] transition
        stopAfter 60000
        whenMsg cmdStop -> goToIdle,                                    // R-stopExplore
        whenMsg robotNearBag -> goToHandleBag

    /**
     * Lo stato goToHandleBag è lo stato che precede la fase di gestione della borsa.
     *
     * Il robot si ferma e scatta una foto, poi procede con la gestione della borsa.
     */
    State goToHandleBag [
        selfMsg handleBag: handleBag(halt);                             // R-stopAtBag
        selfMsg handleBag: handleBag(takePhoto)                         // R-takePhoto
    ] switchTo handleBag

    /**
     * Lo stato handleBag è lo stato che permette di gestire concretamente una borsa.
     *
     * Gestisce i messaggi di halt e di scatto della foto, dopodiché attende istruzioni.
     */
    State handleBag [
        println("HANDLING BAG ...");
        onMsg handleBag: handleBag(halt) -> {                           // R-stopAtBag
            forward robot_adapter -m robotCmd: robotCmd(h);
            forward robot_adapter -m robotCmd: robotCmd(blinkStop);                              // R-blinkLed (stop)
            ReplaceRule ledState(blinking) with ledState(off)
        };
        onMsg handleBag: handleBag(takePhoto) -> {
            println("TAKE PHOTO ...");  // TODO implement               // R-takePhoto
            forward console -m bag: bag(picture(X))                     // R-sendPhoto
        }
    ] transition
        whenTime 1000 -> handleBag
        whenMsg handleBag -> handleBag,
        whenMsg cmdGoHome -> returnHome,
        whenMsg cmdExplore -> goToExploration

    /**
     * Lo stato goToIdle è lo stato che precede lo stato di idle.
     *
     * In questo stato, il robot si ferma e spegne il LED.
     */
    State goToIdle [
        forward robot_adapter -m robotCmd: robotCmd(h);
        forward robot_adapter -m robotCmd: robotCmd(blinkStop);      // R-blinkLed (stop)
        ReplaceRule ledState(blinking) with ledState(off);
        println("The robot was STOPPED: no reply to the caller")
    ] switchTo idle

    /**
     * Lo stato idle attende istruzioni per tornare ad esplorare o tornare a casa.
     */
    State idle [

    ] transition
        stopAfter 60000
        whenMsg cmdExplore -> exploration,                              // R-continueExplore
        whenMsg cmdGoHome -> returnHome                                 // R-backHome

    /**
     * Lo stato returnHome è lo stato in cui il robot torna a casa.
     *
     * Lo stato si ripete finché non è a casa, poi passa ad home.
     */
    State returnHome [
        println("GOING HOME...")        // TODO implement logic
    ] transition
        stopAfter 60000
        whenMsg robotHome -> home
        
    /*
     * PLANNER
     */
    State doActions[
        [ !? move(M) ] println( doActions_doingTheMove(M) );
        [ not !? move(M) ] selfMsg endAction : endAction ;
        ReplaceRule moveDuration(_) with  moveDuration(moveWDuration(0)); // TODO ??
        [ !? move(M) ] selfMsg waitMoveCompleted: waitMoveCompleted;
        [ !? doTheMove(M) ] forward robot_advanced -m robotCmd: robotCmd(M)
    ] transition
        stopAfter 60000
        whenMsg cmdStop -> goToIdle ,   //first to be checked
        whenMsg waitMoveCompleted -> waitMoveCompletedAnswer,
        whenMsg endAction -> backToHome  //all actions done
        finally repeatPlan

    State waitMoveCompletedAnswer [
        
    ] transition
        stopAfter 60000
        whenMsg cmdStop -> goToIdle,   //first to be checked
        whenMsg moveMsgCmdDone -> handleCmdDone,
        whenMsg moveMsgCmdObstacle -> backToHome // TODO debug

    State handleCmdDone [
        printCurrentMessage;
        onMsg moveMsgCmdDone: moveMsgCmdDone(X) -> 
            javaRun it.unibo.planning.planUtil.doMove(X); //update the map
        javaRun it.unibo.planning.planUtil.showMap()
    ] switchTo doActions
    
    State backToHome  [
        [ !? curPos(0,0,D)  ]{
             println("AT HOME");    
             javaRun it.unibo.planning.planUtil.showMap() ; 
             selfMsg endAction : endAction
         }
        else{
            javaRun it.unibo.planning.planUtil.setGoal("0","0");
            [ !? curPos(X,Y,D)  ]  println( backToHome(X,Y,D) );
            javaRun it.unibo.planning.planUtil.doPlan()
        }
    ] transition
        whenTime 100 -> doActions
        whenMsg endAction -> exploreStep
            
    State exploreStep[
        println(state(exploreStep));
        [ !? curPos(X,Y,D)  ]  println( exploreStep(X,Y,D) );
        [ !? continueExplore(N)] {
            javaRun it.unibo.planning.planUtil.extendSpaceToexplore( );
            [!? getVal(curNumExplore,E)] javaRun it.unibo.planning.planUtil.setGoal(E,E); 
            javaRun it.unibo.planning.planUtil.doPlan() //;javaOp "debugStep()"
        } else selfMsg endAction : endAction  
    ]    
    transition whenTime 1000 -> doActions
        whenMsg endAction -> exploreUncovered //: endAction do println("bye")
          
    State exploreUncovered[
        [ !? curPos(X,Y,D)  ]  println( exploreUncovered(X,Y,D) );
        javaRun it.unibo.planning.planUtil.showMap() ;
        javaRun it.unibo.planning.planUtil.findNextCellUncovered( );
        [ !? uncovered(X,Y )] println( uncovered(X,Y ) );
        [ !? uncovered(X,Y )] javaRun it.unibo.planning.planUtil.setGoal(X,Y); 
        [ ?? uncovered(X,Y )] javaRun it.unibo.planning.planUtil.doPlan()  
        else selfMsg endAction : endAction  
        ;javaOp "debugStep()"
    ]
    transition whenTime 100 -> doActions
        whenMsg endAction : endAction do println("bye")

    State handleError[ println("mind ERROR") ]
}

/** Attore che modella la mente del robot retriever, separata dal robot fisico. */
QActor robot_retriever_mind context ctxRobot {
    
    Rules {
        environment(notok).
    }
    
    /**
     * Lo stato home è lo stato iniziale della mind del robot.
     *
     * Attende di ricevere un comando o un evento:
     * - riguardante l'ambiente,
     * - per raggiungere la bomba.
     */
    State home initial [
        
    ] transition
        stopAfter 60000
        whenEvent environment: environment(E) do
            demo replaceRule(environment(X), environment(E)),
        whenMsg cmdReachBomb -> checkTemperatureAndRetrieve                         // R-reachBag & R-TempOk
        finally repeatPlan
    
    State checkTemperatureAndRetrieve [                                             // R-TempOk
        [ !? environment(ok) ] selfMsg cmdReachBomb: cmdReachBomb
    ] transition
        whenTime 100 -> home
        whenMsg cmdReachBomb -> goToReachBomb

    /**
     * Lo stato goToReachBomb è lo stato che precede lo stato di viaggio verso la bomba.
     */
    State goToReachBomb [

    ] transition
        whenTime 1000 -> reachBomb

    /**
     * Lo stato reachBomb è lo stato in cui il robot viaggia verso la bomba.
     *
     * Lo stato si ripete finché non raggiunge la bomba e torna indietro, poi passa ad home.
     */
    State reachBomb [
        println("RETRIVING BOMB ...")
    ] transition
        whenTime 3000 -> reachBomb
        whenMsg robotHome -> home
}

/** Attore console. */
QActor console context ctxRobot {

    /** Stato iniziale della console. */
    State init initial [
        println("Console init")
    ] transition
        whenTime 100 -> doWork

    /**
     * Stato principale della console.
     *
     * Attende messaggi dal robot e li gestisce.
     */
    State doWork [
        // TODO demo operations: ******************************
//        delay 1000;
//        emit temperature: temperature(18);
//        delay 3000;
//        forward robot_discovery_mind -m cmdExplore: cmdExplore;
//        delay 2000;
//        forward robot_discovery_mind -m cmdStop: cmdStop
        // ****************************************************
        delay 3000;forward robot_discovery_mind -m cmdExplore: cmdExplore // TODO debug
    ] transition
        stopAfter 60000
        whenEvent usercmd -> adaptCommand,
        whenEvent robotState -> updateView,                             // R-consoleUpdate
        whenMsg bag -> handlePhoto
        finally repeatPlan
    
    /** Lo stato adaptCommand permette di convertire comandi provenienti dalla WebGUI. */
    State adaptCommand resumeLastPlan [
        printCurrentEvent;
        onEvent usercmd: usercmd(robotgui(cmd(explore))) ->
            forward robot_discovery_mind -m cmdExplore: cmdExplore;
        onEvent usercmd: usercmd(robotgui(cmd(halt))) -> 
            forward robot_discovery_mind -m cmdStop: cmdStop;
        onEvent usercmd: usercmd(robotgui(cmd(home))) ->
            forward robot_discovery_mind -m cmdGoHome: cmdGoHome;
        onEvent usercmd: usercmd(robotgui(bagStatus(bomb))) ->
            selfMsg bagStatus: bagStatus(bomb, args(picture(nothing)));
        onEvent usercmd: usercmd(robotgui(bagStatus(bag))) -> 
            selfMsg bagStatus: bagStatus(bag, args(nothing))
    ]

    /**
     * Lo stato handlePhoto gestisce la ricezione di una foto dal robot.
     *
     * Attende un messaggio di bagStatus per gestirlo.
     */
    State handlePhoto [
        onMsg bag: bag(picture(X)) -> printCurrentMessage
    ] transition
        whenTime 3000 -> handlePhoto
        whenMsg bagStatus -> handleBagStatus,
        whenEvent usercmd -> adaptCommand
        finally repeatPlan

    /**
     * Lo stato handleBagStatus permette di gestire se la borsa è una bomba o no.
     *
     * Se lo è, memorizza la foto, ordina al robot di tornare e segnala un alert.
     * Se non lo è, ordina al robot di continuare l'esplorazione.
     */
    State handleBagStatus [
        onMsg bagStatus: bagStatus(bomb, args(picture(X))) -> {
            // TODO implement save X                                    // R-storePhoto
            forward robot_discovery_mind -m cmdGoHome: cmdGoHome;       // R-backHomeSinceBomb
            selfMsg alert: alert                                        // R-alert
        };
        onMsg bagStatus: bagStatus(bag, Y) ->
            forward robot_discovery_mind -m cmdExplore: cmdExplore      // R-continueExploreAfterPhoto
    ] transition
        whenTime 3000 -> doWork
        whenMsg alert -> handleAlert

    /**
     * Lo stato handleAlert permette di gestire uno stato di allerta.
     *
     * Aspetta che il robot sia tornato poi lo manda a raccogliere la bomba.
     */
    State handleAlert [

    ] transition
        whenTime 3000 -> handleAlert
        whenMsg robotHome: robotHome do
            forward robot_retriever_mind -m cmdReachBomb: cmdReachBomb  // R-waitForHome & R-reachBag

    /**
     * Lo stato updateView permette di gestire gli aggiornamenti di stato della vista.
     *
     * Una volta fatto, riprende lo stato precedente.
     */
    State updateView resumeLastPlan [
        onMsg robotState: state(X) -> printCurrentMessage
    ]
}
