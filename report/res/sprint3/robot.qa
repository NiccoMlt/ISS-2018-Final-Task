System robot

/*
 * *********************************************************
 * Messaggi & Eventi Ambiente
 * *********************************************************
 */

/** X = ok | notok */
Event environment: environment(X)

/** X = temperature (°C) */
Event temperature: temperature(X)

/*
 * *********************************************************
 * Messaggi & Eventi Robot Adapter
 * *********************************************************
 */

/** T = Type ; A = args */
Dispatch robotAdapterAdd: robot(T, A)
/** M = w|a|s|d|h ; T:(int) = duration */
Dispatch robotAdapterCmd: robotCmd(M, T)

/** Comando al robot ; M = w|a|s|d|h */
Dispatch robotCmd: robotCmd(M)

/*
 * *********************************************************
 * Robot-one-cell-forward
 * *********************************************************
 */

Dispatch collisionDispatch: obstacle(TARGET)
Dispatch obstacleNear: obstacleNear
Dispatch moveMsgCmd: moveMsgCmd(TF)
/** X = cmd */
Dispatch moveMsgCmdDone: moveMsgCmdDone(X)
/** X = cmd */
Dispatch moveMsgCmdObstacle: moveMsgCmdObstacle(X)

/*
 * *********************************************************
 * Robot-advanced
 * *********************************************************
 */

Dispatch waitMoveCompleted: waitMoveCompleted

/*
 * *********************************************************
 * Planner
 * *********************************************************
 */

Dispatch endAction: endAction

/*
 * *********************************************************
 * Robot position
 * *********************************************************
 */

 /** X = distance */
Event robotSonar: robotSonar(distance(X))
/** From robot virtual sonar obstacle; X = name */
Event robotSonarObstacle: obstacle(X)

/*
 * *********************************************************
 * Messaggi & Eventi Mind
 * *********************************************************
 */

Dispatch cmdStop: cmdStop                                               // R-stopAtBag & R-stopExplore
Dispatch cmdGoHome: cmdGoHome                                           // R-backHome
Dispatch cmdExplore: cmdExplore                                         // R-explore
Dispatch cmdReachBomb: cmdReachBomb                                     // R-reachBag

/** X = halt|takePhoto */
Dispatch handleBag: handleBag(X)                                        // R-stopAtBag & R-takePhoto

/** X = photo */
Dispatch bag: bag(picture(X))                                           // R-sendPhoto & R-storePhoto

/*
 * *********************************************************
 * Messaggi & Eventi Console
 * *********************************************************
 */

Dispatch alert: alert                                                   // R-alert
/** X = bomb|bag ; Y = arguments */
Dispatch bagStatus: bagStatus(X, args(Y))
/** T = type ; P = payload ; T = temperature|map|robotMovement|robotState */
Dispatch stateUpdate: state(T, P)

/** (X, Y) = coordinates ; M = w|a|s|d|h */
Dispatch robotHome: robotHome
Dispatch robotHomeAfterBomb: robotHomeAfterBomb

/** from GUI to CONSOLE;  X = command */
Event frontendUserCmd: frontendUserCmd(X)
/** from CONSOLE to GUI; X = state */
Event frontendRobotState: frontendRobotState(X)

pubSubServer "tcp://127.0.0.1:1883"

Context ctxRobot ip [ host="localhost" port=8079 ]

// Handler sonar virtuale TODO (manca per il fisico)
EventHandler collisionevh for robotSonarObstacle -print  {
    forwardEvent onecellforward -m collisionDispatch
};

/** Attore che osserva l'ambiente e valuta la temperatura. */
QActor world_observer context ctxRobot {

    Rules {
        // Impostazioni di default:
        temperature(18).
        // Regole di valutazione:
        evaluateTemp :- temperature(X), eval(lt, X, 25).                // R-TempOk
        // Regola di valutazione complessiva:
        evaluateEnvironment :- evaluateTemp.
    }

    State init initial [
        connectAsSubscriber "unibo/environment"
    ] switchTo doObserve

    /** Lo stato doObserve è lo stato nel quale viene verificata la temperatura. */
    State doObserve [
        [ !? evaluateEnvironment ]
            emit environment: environment(ok)
        else
            emit environment: environment(notok)
    ] transition
        whenTime 1000 -> doObserve
        whenEvent temperature -> evaluateTemperature                    // R-TempOk
        finally repeatPlan

    State evaluateTemperature [
        onEvent temperature: temperature(X) ->
            ReplaceRule temperature(_) with temperature(X);
        onEvent temperature: temperature(X) ->
            forward console -m stateUpdate: state(temperature, X)
    ] switchTo doObserve
}

/** Attore che modella un robot. */
QActor robot_adapter context ctxRobot {

    Rules {
//      robotType("robotSerial", setuparg("/dev/ttyACM0")).
//      robotType("robotVirtual", setuparg("localhost")).
      robotType("robotDemo", setuparg("")).
    }

    State init initial [
        println("Robot adapter init")
    ] transition
        whenTime 100 -> initRobots

    /** Stato di inizializzazione degli Executor del Robot Adapter. */
    State initRobots [
        [ ?? robotType(T, setuparg(A)) ]
            selfMsg robotAdapterAdd: robot(T, A)
    ] transition
        whenTime 2000 -> doWork
        whenMsg robotAdapterAdd: robot(T, A) do
            javaRun it.unibo.robot_adapter.robots.setUp(T, A)
        finally repeatPlan

    /**
     * Stato effettivo di lavoro.
     *
     * Esegue i comandi provenienti da messaggi ed eventi.
     */
    State doWork []
    transition
        stopAfter 60000
        whenMsg robotCmd -> executeCommand,
        whenMsg robotAdapterCmd -> executeCommand
        finally repeatPlan

    /** Stato di interpretazione comandi. */
    State executeCommand resumeLastPlan [
        onMsg robotCmd: robotCmd(X) ->
            javaRun it.unibo.robot_adapter.robots.doMove(X);
        onMsg robotAdapterCmd: robotCmd(X, T) ->
            javaRun it.unibo.robot_adapter.robots.doMove(X, T)
    ]
}

/** Muove il robot di una cella. */
QActor onecellforward context ctxRobot {

    Rules{
        timew(10). // impostato da moveMsgCmd
        moveTimeInfo(timew(TF), moveWDuration(TD)) :-
            timew(TF),
            moveWDuration(TD).
    }

    State init initial []
    transition stopAfter 600000
        whenMsg cmdStop -> handleStop,
        whenMsg moveMsgCmd -> startWork

    State startWork[
        onMsg moveMsgCmd: moveMsgCmd(TF) ->
            ReplaceRule timew(_) with timew(TF);
        javaOp "storeCurrentMessageForReply()";  // utilizzato da replyToCaller
        javaRun it.unibo.utils.movePlanUtil.startTimer();
        [ !? timew(T) ]
            forward robot_adapter -m robotAdapterCmd: robotCmd(w, T)
    ] transition
        /* [ !? timew(T) ] whenTime T */ whenTime 255 -> endMoveForward // async
        whenMsg cmdStop -> handleStop,
        whenMsg collisionDispatch -> probableFixedObstacle

    State probableFixedObstacle[
        forward robot_adapter -m robotAdapterCmd: robotCmd(h, 0);
        javaRun it.unibo.utils.movePlanUtil.getDuration();
        [ !? moveWDuration(T) ]
            println(onecellforward_probableFixedObstacle(T));
        selfMsg obstacleNear: obstacleNear
    ] switchTo consumePendingCollisions

    State consumePendingCollisions [
        println("onecellforward_consumePendingCollisions: (a physical sonar should ...)")
    ] transition
        whenTime 3000 -> handleError
        whenMsg cmdStop -> handleStop,
        whenMsg collisionDispatch -> consumePendingCollisions,
        whenMsg obstacleNear -> sendAnswerAfterCollision

    State sendAnswerAfterCollision [ // gli ostacoli hanno durata negativa
        println("onecellforward sendAnswerAfterCollision");
        javaOp "ignoreCurrentCaller()"; // imposta currentMessage = null;
        [ ?? moveWDuration(T) ] // rispondi al chiamante memorizzato
            replyToCaller -m moveMsgCmdObstacle : moveMsgCmdObstacle(moveWDuration(T))
    ] switchTo init

    State endMoveForward [
        // forward robot_adapter -m robotAdapterCmd: robotCmd(h, 0);
        // javaRun it.unibo.utils.movePlanUtil.getDuration();
        // [ !? moveTimeInfo(TF,TD)] replyToCaller -m moveMsgCmdDone: moveMsgCmdDone(w)
        replyToCaller -m moveMsgCmdDone: moveMsgCmdDone(w)
    ] switchTo init

    State handleStop [
        println("onecellforward: robot STOPPED: no reply to the caller")
    ]

    State handleError [
        println("onecellforward ERROR")
    ]
}

QActor robot_advanced context ctxRobot {

    Rules {
        timew(255).
        timeTurn(500).
    }

    State init initial []
    switchTo doWork

    State doWork []
    transition
        stopAfter 60000
        whenMsg robotCmd -> executeCommand

    State executeCommand [
        javaOp "storeCurrentMessageForReply()"; // utilizzato da replyToCaller
        onMsg robotCmd: robotCmd(a) -> {
            [ !? timeTurn(T) ] forward robot_adapter -m robotAdapterCmd: robotCmd(a,T);
            selfMsg waitMoveCompleted: waitMoveCompleted
        };
        onMsg robotCmd: robotCmd(d) -> {
            [ !? timeTurn(T) ] forward robot_adapter -m robotAdapterCmd: robotCmd(d,T);
            selfMsg waitMoveCompleted: waitMoveCompleted
        };
        onMsg robotCmd: robotCmd(w) -> {
            // tentativo di movimento
            [ !? timew(T) ] forward onecellforward -m moveMsgCmd : moveMsgCmd(T);
            selfMsg waitMoveCompleted: waitMoveCompleted
        }
    ] transition
        whenTime 100 -> doWork
        whenMsg waitMoveCompleted -> waitMoveComletedAnswer

    State waitMoveComletedAnswer []
    transition
        stopAfter 60000
        whenMsg moveMsgCmdDone -> receivedMoveCompletedAnswer,
        whenMsg moveMsgCmdObstacle -> receivedMoveCompletedAnswer

    State receivedMoveCompletedAnswer [
        onMsg moveMsgCmdDone: moveMsgCmdDone(X) ->
            replyToCaller -m moveMsgCmdDone: moveMsgCmdDone(X);
        onMsg moveMsgCmdObstacle: moveMsgCmdObstacle(moveWDuration(T)) ->
            forward robot_adapter -m robotAdapterCmd: robotCmd(s, T); // Indietro per compensare
        onMsg moveMsgCmdObstacle: moveMsgCmdObstacle(moveWDuration(T)) ->
            replyToCaller -m moveMsgCmdObstacle: moveMsgCmdObstacle(moveWDuration(T))
    ] switchTo doWork
}

/** Attore che modella la mente del robot discovery, separata dal robot fisico. */
QActor robot_discovery_mind context ctxRobot {

    Rules {
        environment(notok).
        /** ledState(X) ; X = off|blinking */
        ledState(off).

        // PLANNER
        numOfExplorations(3).
        curGoal(0, 0).

        continueForward(T) :-
            timew(T),
            inc(repeatForward, 1, R),
            getVal(nstep, N),
            output(continueForward(R, N, T)),
            eval(lt, R, N).
        continueExplore(V) :-
            numOfExplorations(MAX),
            inc(curNumExplore, 1, V),
            output(continueExplore(V, MAX)),
            eval(le, V, MAX),
            replaceRule(curGoal(_, _), curGoal(V, V)).
        continueExplore(V) :- removeeRule(curGoal(_, _)).

        //----------------------------------
        eval( eq, X, X ).     // since we have syntax limitations
        doTheMove(M) :-  // moveDone does not exist: we can go on
            move(M1), !, // M1 is the first move to do
            eval(eq,M,M1), !,
            doTheFirstMove(M).

        doTheFirstMove(w) :- retract( move(w) ), !.
        doTheFirstMove(a) :- retract( move(a) ), !.
        doTheFirstMove(d) :- retract( move(d) ), !.

        foundBomb :- bomb(X,Y).
    }

    State init initial [
        // Planner
        javaRun it.unibo.planning.planUtil.initAI()
    ] switchTo home

    /**
     * Lo stato home è lo stato iniziale della mind del robot.
     *
     * Attende per 60s di ricevere un comando o un evento:
     * - riguardante l'ambiente,
     * - per iniziare l'esplorazione.
     */
    State home [
        javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("home");
        [ !? foundBomb ]
            forward console -m robotHome: robotHome
    ] transition
        stopAfter 60000
        whenEvent environment: environment(E) do
            demo replaceRule(environment(X), environment(E)),
        whenMsg cmdExplore -> checkTemperatureAndExplore                // R-explore & R-TempOk
        finally repeatPlan

    State checkTemperatureAndExplore [                                  // R-TempOk
        [ !? environment(ok) ]
            selfMsg cmdExplore: cmdExplore
    ] transition
        whenTime 100 -> home
        whenMsg cmdExplore -> startExploration

    /*
     * -----------------------------------------------------------------------------
     * Exploration business logic
     * -----------------------------------------------------------------------------
     */
    State startExploration [
        // Planner
        demo assign(curNumExplore, 0);
        javaRun it.unibo.planning.planUtil.cleanQa();
        demo assign(nstep, 0)
    ] switchTo goToExploration

    /**
     * Lo stato goToExploration è lo stato che precede l'inizio dell'esplorazione.
     *
     * La mind abilita il lampeggio del LED sul robot e inizia ad esplorare.
     */
    State goToExploration [
        ReplaceRule ledState(off) with ledState(blinking);
        println("DISCOVERY_MIND[[goToExploration] ...");
        javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("exploring");
        forward robot_adapter -m robotCmd: robotCmd(blinkStart)         // R-blinkLed (start)
    ] switchTo exploreStep

    State resumeExploration [
        println("DISCOVERY_MIND[resumeExploration] ...");
        javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("exploring");
        forward robot_adapter -m robotCmd: robotCmd(blinkStart)         // R-blinkLed (start)
    ] switchTo doActions

    /**
     * Lo stato goToHandleBag è lo stato che precede la fase di gestione della borsa.
     *
     * Il robot si ferma e scatta una foto, poi procede con la gestione della borsa.
     */
    State goToHandleBag [
        println("DISCOVERY_MIND[goToHandleBag] ...");
        javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("obstacle");
        // Handle obstacle
        ReplaceRule ledState(blinking) with ledState(off);              // R-blinkLed (stop)
        forward robot_adapter -m robotCmd: robotCmd(blinkStop);         // R-blinkLed (stop)
        println("TAKE PHOTO ...");  // TODO implement                   // R-takePhoto
        forward console -m bag: bag(picture(ofBag));                    // R-sendPhoto
        [ !? curPos(X, Y, D) ]
            println( handleFixedObstacleCases_1(X, Y, D));
        // Update map
        javaRun it.unibo.planning.planUtil.markCellAsObstacle();
        javaRun it.unibo.planning.planUtil.showMap();
        javaRun it.unibo.utils.updateStateOnConsole.updateMap()
    ] switchTo handleBag

    /**
     * Lo stato handleBag è lo stato che permette di gestire concretamente una borsa.
     *
     * Gestisce i messaggi di halt e di scatto della foto, dopodiché attende istruzioni.
     */
    State handleBag [                                                   // R-stopAtBag
        println("DISCOVERY_MIND[handleBag] waiting for console command ...")
    ]
    transition
        stopAfter 60000
        whenMsg cmdGoHome -> backHomeAfterBomb,                         // R-backHome
        whenMsg cmdExplore -> resumeExplorationAfterBag                 // R-continueExplore

    State resumeExplorationAfterBag [
        println("DISCOVERY_MIND[resumeExplorationAfterBag] ...");
        javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("exploring");
        // Update plan to continue exploration
        [ !? curGoal(N,N)  ]
            javaRun it.unibo.planning.planUtil.setGoal(N,N) ;
        [ !? curGoal(N,N)  ]
            javaRun it.unibo.planning.planUtil.doPlan()
    ] switchTo doActions

    State backHomeAfterBomb [
        println("DISCOVERY_MIND[backHomeAfterBomb] ...");
        // Update map
        javaRun it.unibo.planning.planUtil.markCellAsBomb()
    ] switchTo goToHome

    /**
     * Lo stato goToIdle è lo stato che precede lo stato di idle.
     *
     * In questo stato, il robot si ferma e spegne il LED.
     */
    State goToIdle [
        ReplaceRule ledState(blinking) with ledState(off);
        println("DISCOVERY_MIND[goToIdle] ...");
        javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("idle");
        forward robot_adapter -m robotCmd: robotCmd(blinkStop)          // R-blinkLed (stop)
    ] switchTo idle

    /**
     * Lo stato idle attende istruzioni per tornare ad esplorare o tornare a casa.
     */
    State idle [

    ] transition
        stopAfter 60000
        whenMsg cmdExplore -> resumeExploration,                        // R-continueExplore
        whenMsg cmdGoHome -> goToHome                                   // R-backHome

    State goToHome [
        println("DISCOVERY_MIND[goToHome] ...");
        javaRun it.unibo.utils.updateStateOnConsole.updateRobotState("home");
        forward robot_adapter -m robotCmd: robotCmd(blinkStart)         // R-blinkLed (start)
    ] switchTo backToHome

    /*
     * PLANNER
     */
    State doActions[
        [ !? move(M) ]
            println( doActions_doingTheMove(M) );
        [ not !? move(M) ]
            selfMsg endAction : endAction ;
        ReplaceRule moveDuration(_) with moveDuration(moveWDuration(0));
        [ !? move(M) ]
            selfMsg waitMoveCompleted: waitMoveCompleted;
        [ !? doTheMove(M) ]
            forward robot_advanced -m robotCmd: robotCmd(M)
    ] transition
        stopAfter 60000
        whenMsg cmdStop -> goToIdle,   //first to be checked
        whenMsg cmdExplore -> goToExploration,
        whenMsg cmdGoHome -> goToHome,
        whenMsg waitMoveCompleted -> waitMoveCompletedAnswer,
        whenMsg endAction -> backToHome  //all actions done
        finally repeatPlan

    State waitMoveCompletedAnswer []
    transition
        stopAfter 60000
        // whenMsg cmdStop -> goToIdle,   // first to be checked // TODO
        whenMsg moveMsgCmdDone -> handleCmdDone,
        whenMsg moveMsgCmdObstacle -> goToHandleBag

    State handleCmdDone [
        printCurrentMessage;
        onMsg moveMsgCmdDone: moveMsgCmdDone(X) ->
            javaRun it.unibo.planning.planUtil.doMove(X); //update the map
        javaRun it.unibo.planning.planUtil.showMap();
        javaRun it.unibo.utils.updateStateOnConsole.updateMap()
    ] transition
        whenTime 100 -> doActions
        whenMsg cmdStop -> goToIdle

    State backToHome  [
        [ !? curPos(0, 0, D) ] {
            forward robot_adapter -m robotCmd: robotCmd(blinkStop);                 // R-blinkLed (stop)
            println("AT HOME");
            javaRun it.unibo.planning.planUtil.showMap();
            javaRun it.unibo.utils.updateStateOnConsole.updateMap();
            [ !? foundBomb ]
                selfMsg robotHomeAfterBomb: robotHomeAfterBomb
            else
                selfMsg endAction: endAction
        } else {
            javaRun it.unibo.planning.planUtil.setGoal("0", "0");
            [ !? curPos(X, Y, D) ]
                println( backToHome(X, Y, D) );
            javaRun it.unibo.planning.planUtil.doPlan()
        }
    ] transition
        whenTime 100 -> doActions
        whenMsg endAction -> exploreStep,
        whenMsg robotHomeAfterBomb -> home

    State exploreStep [
        println(state(exploreStep));
        [ !? curPos(X, Y, D) ]
            println( exploreStep(X, Y, D) );
        [ !? continueExplore(N) ] {
            javaRun it.unibo.planning.planUtil.extendSpaceToexplore( );
            [!? getVal(curNumExplore, E)]
                javaRun it.unibo.planning.planUtil.setGoal(E,E);
            javaRun it.unibo.planning.planUtil.doPlan() //;javaOp "debugStep()"
        } else {
            selfMsg endAction: endAction
        }
    ]
    transition whenTime 1000 -> doActions
        whenMsg endAction -> exploreUncovered

    State exploreUncovered[
        [ !? curPos(X,Y,D) ]
            println( exploreUncovered(X, Y, D) );
        javaRun it.unibo.planning.planUtil.showMap();
        javaRun it.unibo.utils.updateStateOnConsole.updateMap();
        javaRun it.unibo.planning.planUtil.findNextCellUncovered( );
        [ !? uncovered(X,Y )]
            println( uncovered(X, Y) );
        [ !? uncovered(X,Y )]
            javaRun it.unibo.planning.planUtil.setGoal(X,Y);
        [ ?? uncovered(X,Y )]
            javaRun it.unibo.planning.planUtil.doPlan()
        else
            selfMsg endAction: endAction
        // ;javaOp "debugStep()"
    ] transition
        whenTime 100 -> doActions
        whenMsg endAction: endAction do println("bye")

    State handleError [
        println("mind ERROR")
    ]
}

/** Attore che modella la mente del robot retriever, separata dal robot fisico. */
QActor robot_retriever_mind context ctxRobot {

    Rules {
        environment(notok).
    }

    /**
     * Lo stato home è lo stato iniziale della mind del robot.
     *
     * Attende di ricevere un comando o un evento:
     * - riguardante l'ambiente,
     * - per raggiungere la bomba.
     */
    State home initial []
    transition
        stopAfter 60000
        whenEvent environment: environment(E) do
            demo replaceRule(environment(X), environment(E)),
        whenMsg cmdReachBomb -> checkTemperatureAndRetrieve                         // R-reachBag & R-TempOk
        finally repeatPlan

    State checkTemperatureAndRetrieve [                                             // R-TempOk
        [ !? environment(ok) ]
            selfMsg cmdReachBomb: cmdReachBomb
    ] transition
        whenTime 100 -> home
        whenMsg cmdReachBomb -> goToReachBomb

    /**
     * Lo stato goToReachBomb è lo stato che precede lo stato di viaggio verso la bomba.
     */
    State goToReachBomb []
    transition
        whenTime 1000 -> reachBomb

    /**
     * Lo stato reachBomb è lo stato in cui il robot viaggia verso la bomba.
     *
     * Lo stato si ripete finché non raggiunge la bomba e torna indietro, poi passa ad home.
     */
    State reachBomb [
        println("RETRIVING BOMB ...")
    ] transition
        whenTime 3000 -> reachBomb
        whenMsg robotHome -> home
}

/** Attore console. */
QActor console context ctxRobot {

    /** Stato iniziale della console. */
    State init initial [
        delay 500;
        println("Console init");
        connectAsSubscriber "unibo/frontendUserCmd"
    ] switchTo doWork

    /**
     * Stato principale della console.
     *
     * Attende messaggi dal robot e li gestisce.
     */
    State doWork []
    transition
        stopAfter 60000
        whenEvent frontendUserCmd -> adaptCommand,
        whenMsg stateUpdate -> updateView,                            // R-consoleUpdate
        whenMsg bag -> handlePhoto
        finally repeatPlan

    /** Lo stato adaptCommand permette di convertire comandi provenienti dalla WebGUI. */
    State adaptCommand resumeLastPlan [
        printCurrentEvent;
        onEvent frontendUserCmd: frontendUserCmd(cmd(explore)) ->
            forward robot_discovery_mind -m cmdExplore: cmdExplore;
        onEvent frontendUserCmd: frontendUserCmd(cmd(halt)) ->
            forward robot_discovery_mind -m cmdStop: cmdStop;
        onEvent frontendUserCmd: frontendUserCmd(cmd(home)) ->
            forward robot_discovery_mind -m cmdGoHome: cmdGoHome;
        onEvent frontendUserCmd: frontendUserCmd(bagStatus(bomb)) ->
            selfMsg bagStatus: bagStatus(bomb, args(picture(nothing)));
        onEvent frontendUserCmd: frontendUserCmd(bagStatus(bag)) ->
            selfMsg bagStatus: bagStatus(bag, args(nothing))
    ]

    /**
     * Lo stato handlePhoto gestisce la ricezione di una foto dal robot.
     *
     * Attende un messaggio di bagStatus per gestirlo.
     */
    State handlePhoto [
        onMsg bag: bag(picture(X)) -> printCurrentMessage
    ] transition
        stopAfter 60000
        whenMsg bagStatus -> handleBagStatus,
        whenEvent frontendUserCmd -> adaptCommand
        finally repeatPlan

    /**
     * Lo stato handleBagStatus permette di gestire se la borsa è una bomba o no.
     *
     * Se lo è, memorizza la foto, ordina al robot di tornare e segnala un alert.
     * Se non lo è, ordina al robot di continuare l'esplorazione.
     */
    State handleBagStatus [
        onMsg bagStatus: bagStatus(bomb, args(picture(X))) -> {
            // TODO implement save X                                    // R-storePhoto
            forward robot_discovery_mind -m cmdGoHome: cmdGoHome;       // R-backHomeSinceBomb
            selfMsg alert: alert                                        // R-alert
        };
        onMsg bagStatus: bagStatus(bag, Y) ->
            forward robot_discovery_mind -m cmdExplore: cmdExplore      // R-continueExploreAfterPhoto
    ] transition
        whenTime 3000 -> doWork
        whenMsg alert -> handleAlert

    /**
     * Lo stato handleAlert permette di gestire uno stato di allerta.
     *
     * Aspetta che il robot sia tornato poi lo manda a raccogliere la bomba.
     */
    State handleAlert []
    transition
        stopAfter 60000
        whenMsg robotHome: robotHome do
            forward robot_retriever_mind -m cmdReachBomb: cmdReachBomb,  // R-waitForHome & R-reachBag
        whenMsg stateUpdate -> updateView
        finally repeatPlan

    /**
     * Lo stato updateView permette di gestire gli aggiornamenti di stato della vista.
     *
     * Una volta fatto, riprende lo stato precedente.
     */
    State updateView resumeLastPlan [
        // onMsg stateUpdate: state(T,P) -> printCurrentEvent;
        onMsg stateUpdate: state(T,P) -> javaRun it.unibo.utils.updateStateOnConsole.receivedUpdateState(T, P)
    ]
}
