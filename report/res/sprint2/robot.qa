System robot

/** X = ok | notok */
Event environment: environment(X)

/** X = temperature (Â°C) */
Event temperature: temperature(X)

/** T = Type ; A = args */
Dispatch robotAdapterAdd: robot(T, A)
/** M = w|a|s|d|h ; T:(int) = duration */
Dispatch robotAdapterCmd: robotCmd(M, T)

/** Comando al robot ; M = w|a|s|d|h */
Dispatch robotCmd: robotCmd(M)

Dispatch collisionDispatch: obstacle(TARGET)
Dispatch obstacleNear: obstacleNear
Dispatch moveMsgCmd: moveMsgCmd(TF)
Dispatch moveMsgCmdDone: moveMsgCmdDone(X) // X = cmd
Dispatch moveMsgCmdObstacle: moveMsgCmdObstacle(X) // X = cmd

Dispatch waitMoveCompleted: waitMoveCompleted

Dispatch endAction: endAction

/** X = distance */
Event robotSonar: robotSonar(distance(X))
/** From robot virtual sonar obstacle; X = name */
Event robotSonarObstacle: obstacle(X)

Dispatch cmdStop: cmdStop                                               // R-stopAtBag & R-stopExplore
Dispatch cmdGoHome: cmdGoHome                                           // R-backHome
Dispatch cmdExplore: cmdExplore                                         // R-explore
Dispatch cmdReachBomb: cmdReachBomb                                     // R-reachBag

/** X = halt|takePhoto */
Dispatch handleBag: handleBag(X)                                        // R-stopAtBag & R-takePhoto

/** X = photo */
Dispatch bag: bag(picture(X))                                           // R-sendPhoto & R-storePhoto

Dispatch alert: alert                                                   // R-alert
/** X = bomb|bag ; Y = arguments */
Dispatch bagStatus: bagStatus(X, args(Y))

/** (X, Y) = coordinates ; M = w|a|s|d|h */
Event robotState: state(position(X, Y), movement(M))                    // R-consoleUpdate
Dispatch robotHome: robotHome
Dispatch robotNearBag: robotNearBag

/** X = robotgui(CMD) CMD = s(low) ; from robot GUI */
Event usercmd: usercmd(X)

Context ctxRobot ip [ host="localhost" port=8079 ] -httpserver

EventHandler collisionevh for robotSonarObstacle -print  {
    forwardEvent onecellforward -m collisionDispatch
};

QActor world_observer context ctxRobot {

    Rules {
        temperature(18).

        evaluateTemp :- temperature(X), eval(lt, X, 25).                // R-TempOk
        evaluateEnvironment :- evaluateTemp.
    }

    State doObserve initial [
        [ !? evaluateEnvironment ]
            emit environment: environment(ok)
        else
            emit environment: environment(notok)
    ] transition
        whenTime 1000 -> doObserve
        whenEvent temperature: temperature(X) do
            ReplaceRule temperature(Z) with temperature(X)              // R-TempOk
        finally repeatPlan
}

/** Attore che modella un robot. */
QActor robot_adapter context ctxRobot {

    Rules {
      // robotType("robotSerial", setuparg("/dev/ttyACM0")).
      // robotType("robotVirtual", setuparg("localhost")).
      robotType("robotDemo", setuparg("")).
    }

    State init initial []
    transition
        whenTime 100 -> initRobots

    State initRobots [
        [ ?? robotType(T, setuparg(A)) ] selfMsg robotAdapterAdd: robot(T, A)
    ] transition
        whenTime 2000 -> doWork
        whenMsg robotAdapterAdd: robot(T, A) do
            javaRun it.unibo.robot_adapter.robots.setUp(T, A)
        finally repeatPlan

    State doWork []
    transition
        stopAfter 60000
        whenMsg robotCmd -> executeCommand,
        whenMsg robotAdapterCmd -> executeCommand
        finally repeatPlan

    State executeCommand resumeLastPlan [
        onMsg robotCmd: robotCmd(X) ->
            javaRun it.unibo.robot_adapter.robots.doMove(X);
        onMsg robotAdapterCmd: robotCmd(X, T) ->
            javaRun it.unibo.robot_adapter.robots.doMove(X, T)
    ]
}

QActor onecellforward context ctxRobot {

    Rules{
        timew(10).
        moveTimeInfo(timew(TF), moveWDuration(TD)) :-
            timew(TF),
            moveWDuration(TD).
    }

    State init initial []
    transition stopAfter 600000
        whenMsg cmdStop -> handleStop,
        whenMsg moveMsgCmd -> startWork

    State startWork [
        onMsg moveMsgCmd: moveMsgCmd(TF) -> ReplaceRule timew(_) with timew(TF);
        javaOp "storeCurrentMessageForReply()";
        javaRun it.unibo.utils.movePlanUtil.startTimer();
        [ !? timew(T) ] forward robot_adapter -m robotAdapterCmd: robotCmd(w, T)
    ] transition
        /* [ !? timew(T) ] whenTime T */ whenTime 255 -> endMoveForward // async
        whenMsg cmdStop -> handleStop,
        whenMsg collisionDispatch -> probableFixedObstacle

    State probableFixedObstacle[
        forward robot_adapter -m robotAdapterCmd: robotCmd(h, 0);
        javaRun it.unibo.utils.movePlanUtil.getDuration();
        [ !? moveWDuration(T) ] println(onecellforward_probableFixedObstacle(T));
        selfMsg obstacleNear: obstacleNear
    ] switchTo consumePendingCollisions

    State consumePendingCollisions [
        println("onecellforward: consumePendingCollisions")
    ] transition
        whenTime 3000 -> handleError
        whenMsg cmdStop -> handleStop,
        whenMsg collisionDispatch -> consumePendingCollisions,
        whenMsg obstacleNear -> sendAnswerAfterCollision

    State sendAnswerAfterCollision [
        println("onecellforward: sendAnswerAfterCollision");
        javaOp "ignoreCurrentCaller()";
        [ ?? moveWDuration(T) ]
            replyToCaller -m moveMsgCmdObstacle: moveMsgCmdObstacle(moveWDuration(T))
    ] switchTo init

    State endMoveForward [
        forward robot_adapter -m robotAdapterCmd: robotCmd(h, 0);
        replyToCaller -m moveMsgCmdDone: moveMsgCmdDone(w)
    ] switchTo init

    State handleStop [
        println("onecellforward: robot STOPPED: no reply to the caller")
    ]

    State handleError [
        println("onecellforward ERROR")
    ]
}

QActor robot_advanced context ctxRobot {

    Rules {
        timew(255).
        timeTurn(500).
    }

    State init initial []
    switchTo doWork

    State doWork []
    transition
        stopAfter 60000
        whenMsg robotCmd -> executeCommand

    State executeCommand [
        javaOp "storeCurrentMessageForReply()";
        onMsg robotCmd: robotCmd(a) -> {
            [ !? timeTurn(T) ]
                forward robot_adapter -m robotAdapterCmd: robotCmd(a,T);
            selfMsg waitMoveCompleted: waitMoveCompleted
        };
        onMsg robotCmd: robotCmd(d) -> {
            [ !? timeTurn(T) ]
                forward robot_adapter -m robotAdapterCmd: robotCmd(d,T);
            selfMsg waitMoveCompleted: waitMoveCompleted
        };
        onMsg robotCmd: robotCmd(w) -> {
            [ !? timew(T) ]
                forward onecellforward -m moveMsgCmd : moveMsgCmd(T);
            selfMsg waitMoveCompleted: waitMoveCompleted
        }
    ] transition
        whenTime 100 -> doWork
        whenMsg waitMoveCompleted -> waitMoveComletedAnswer

    State waitMoveComletedAnswer []
    transition
        stopAfter 60000
        whenMsg moveMsgCmdDone -> receivedMoveCompletedAnswer,
        whenMsg moveMsgCmdObstacle -> receivedMoveCompletedAnswer

    State receivedMoveCompletedAnswer [
        onMsg moveMsgCmdDone: moveMsgCmdDone(X) ->
            replyToCaller -m moveMsgCmdDone: moveMsgCmdDone(X);
        onMsg moveMsgCmdObstacle: moveMsgCmdObstacle(moveWDuration(T)) ->
            forward robot_adapter -m robotAdapterCmd: robotCmd(s, T);
        onMsg moveMsgCmdObstacle: moveMsgCmdObstacle(moveWDuration(T)) ->
            replyToCaller -m moveMsgCmdObstacle: moveMsgCmdObstacle(moveWDuration(T))
    ] switchTo doWork
}

QActor robot_discovery_mind context ctxRobot {

    Rules {
        environment(notok).
        /** ledState(X) ; X = off|blinking */
        ledState(off).

        numOfExplorations(3).
        curGoal(0, 0).

        continueForward(T) :-
            timew(T),
            inc(repeatForward, 1, R),
            getVal(nstep, N),
            output(continueForward(R, N, T)),
            eval(lt, R, N).
        continueExplore(V) :-
            numOfExplorations(MAX),
            inc(curNumExplore, 1, V),
            output(continueExplore(V, MAX)),
            eval(le, V, MAX),
            replaceRule(curGoal(_, _), curGoal(V, V)).
        continueExplore(V) :- removeeRule(curGoal(_, _)).

        eval( eq, X, X ).
        doTheMove(M) :-
            move(M1), !,
            eval(eq,M,M1), !,
            doTheFirstMove(M).

        doTheFirstMove(w) :- retract( move(w) ), !.
        doTheFirstMove(a) :- retract( move(a) ), !.
        doTheFirstMove(d) :- retract( move(d) ), !.
    }

    State init initial [
        javaRun it.unibo.planning.planUtil.initAI()
    ] switchTo home

    State home [
        onMsg robotHome: robotHome -> forward console -m robotHome: robotHome
    ] transition
        stopAfter 60000
        whenEvent environment: environment(E) do
            demo replaceRule(environment(X), environment(E)),
        whenMsg cmdExplore -> checkTemperatureAndExplore                // R-explore & R-TempOk
        finally repeatPlan

    State checkTemperatureAndExplore [                                  // R-TempOk
        [ !? environment(ok) ] selfMsg cmdExplore: cmdExplore
    ] transition
        whenTime 100 -> home
        whenMsg cmdExplore -> goToExploration

    State goToExploration [
        ReplaceRule ledState(off) with ledState(blinking);
        println("STATE[goToExploration] ...");
        forward robot_adapter -m robotCmd: robotCmd(blinkStart);        // R-blinkLed (start)
        // Planner
        demo assign(curNumExplore, 0);
        javaRun it.unibo.planning.planUtil.cleanQa();
        demo assign(nstep, 0)
    ] switchTo exploreStep

    State goToHandleBag [
        println("STATE[goToHandleBag] ...");
        // Handle obstacle
        ReplaceRule ledState(blinking) with ledState(off);              // R-blinkLed (stop)
        forward robot_adapter -m robotCmd: robotCmd(blinkStop);         // R-blinkLed (stop)
        println("TAKE PHOTO ...");  // TODO implement                   // R-takePhoto
        forward console -m bag: bag(picture(ofBag));                    // R-sendPhoto
        [ !? curPos(X, Y, D) ] println( handleFixedObstacleCases_1(X, Y, D));
        // Update map
        javaRun it.unibo.planning.planUtil.markCellAsObstacle();
        javaRun it.unibo.planning.planUtil.showMap()
    ] switchTo handleBag

    State handleBag []
    transition
        stopAfter 60000
        whenMsg cmdGoHome -> goToHome,                                              // R-backHome
        whenMsg cmdExplore -> resumeExplorationAfterBag                             // R-continueExplore

    State resumeExplorationAfterBag [
        [ !? curGoal(N,N) ] javaRun it.unibo.planning.planUtil.setGoal(N,N);
        [ !? curGoal(N,N) ] javaRun it.unibo.planning.planUtil.doPlan()
    ] switchTo doActions

    State goToIdle [
        ReplaceRule ledState(blinking) with ledState(off);
        println("STATE[goToIdle] ...");
        forward robot_adapter -m robotCmd: robotCmd(blinkStop)                      // R-blinkLed (stop)
    ] switchTo idle

    State goToHome [
        println("STATE[goToHome] ...");
        forward robot_adapter -m robotCmd: robotCmd(blinkStart)                     // R-blinkLed (start)
    ] switchTo backToHome

    State idle []
    transition
        stopAfter 60000
        whenMsg cmdExplore -> goToExploration,                                      // R-continueExplore
        whenMsg cmdGoHome -> goToHome                                               // R-backHome

    State doActions[
        [ !? move(M) ]
            println( doActions_doingTheMove(M) );
        [ not !? move(M) ]
            selfMsg endAction : endAction ;
        ReplaceRule moveDuration(_) with moveDuration(moveWDuration(0));
        [ !? move(M) ]
            selfMsg waitMoveCompleted: waitMoveCompleted;
        [ !? doTheMove(M) ]
            forward robot_advanced -m robotCmd: robotCmd(M)
    ] transition
        stopAfter 60000
        whenMsg cmdStop -> goToIdle,   //first to be checked
        whenMsg cmdExplore -> goToExploration,
        whenMsg cmdGoHome -> goToHome,
        whenMsg waitMoveCompleted -> waitMoveCompletedAnswer,
        whenMsg endAction -> backToHome  //all actions done
        finally repeatPlan

    State waitMoveCompletedAnswer []
    transition
        stopAfter 60000
        whenMsg cmdStop -> goToIdle,   //first to be checked
        whenMsg moveMsgCmdDone -> handleCmdDone,
        whenMsg moveMsgCmdObstacle -> goToHandleBag

    State handleCmdDone [
        printCurrentMessage;
        onMsg moveMsgCmdDone: moveMsgCmdDone(X) ->
            javaRun it.unibo.planning.planUtil.doMove(X); //update the map
        javaRun it.unibo.planning.planUtil.showMap()
    ] switchTo doActions

    State backToHome  [
        [ !? curPos(0,0,D) ] {
            forward robot_adapter -m robotCmd: robotCmd(blinkStop);                 // R-blinkLed (stop)
            println("AT HOME");
            javaRun it.unibo.planning.planUtil.showMap() ;
            selfMsg endAction: endAction
        } else {
            javaRun it.unibo.planning.planUtil.setGoal("0","0");
            [ !? curPos(X,Y,D) ]
                println( backToHome(X,Y,D) );
            javaRun it.unibo.planning.planUtil.doPlan()
        }
    ] transition
        whenTime 100 -> doActions
        whenMsg endAction -> exploreStep

    State exploreStep [
        println(state(exploreStep));
        [ !? curPos(X,Y,D) ]
            println( exploreStep(X,Y,D) );
        [ !? continueExplore(N)] {
            javaRun it.unibo.planning.planUtil.extendSpaceToexplore( );
            [!? getVal(curNumExplore,E)]
                javaRun it.unibo.planning.planUtil.setGoal(E,E);
            javaRun it.unibo.planning.planUtil.doPlan() //;javaOp "debugStep()"
        } else {
            selfMsg endAction: endAction
        }
    ]
    transition whenTime 1000 -> doActions
        whenMsg endAction -> exploreUncovered //: endAction do println("bye")

    State exploreUncovered[
        [ !? curPos(X,Y,D) ]
            println( exploreUncovered(X,Y,D) );
        javaRun it.unibo.planning.planUtil.showMap() ;
        javaRun it.unibo.planning.planUtil.findNextCellUncovered( );
        [ !? uncovered(X,Y )]
            println( uncovered(X,Y ) );
        [ !? uncovered(X,Y )]
            javaRun it.unibo.planning.planUtil.setGoal(X,Y);
        [ ?? uncovered(X,Y )]
            javaRun it.unibo.planning.planUtil.doPlan()
        else
            selfMsg endAction: endAction
        ;javaOp "debugStep()"
    ] transition
        whenTime 100 -> doActions
        whenMsg endAction: endAction do println("bye")

    State handleError [
        println("mind ERROR")
    ]
}

QActor robot_retriever_mind context ctxRobot {

    Rules {
        environment(notok).
    }

    State home initial []
    transition
        stopAfter 60000
        whenEvent environment: environment(E) do
            demo replaceRule(environment(X), environment(E)),
        whenMsg cmdReachBomb -> checkTemperatureAndRetrieve             // R-reachBag & R-TempOk
        finally repeatPlan

    State checkTemperatureAndRetrieve [                                 // R-TempOk
        [ !? environment(ok) ] selfMsg cmdReachBomb: cmdReachBomb
    ] transition
        whenTime 100 -> home
        whenMsg cmdReachBomb -> goToReachBomb

    State goToReachBomb []
    transition
        whenTime 1000 -> reachBomb

    State reachBomb [
        println("RETRIVING BOMB ...")
    ] transition
        whenTime 3000 -> reachBomb
        whenMsg robotHome -> home
}

QActor console context ctxRobot {

    State init initial [
        println("Console init")
    ] switchTo doWork

    State doWork []
    transition
        stopAfter 60000
        whenEvent usercmd -> adaptCommand,
        whenEvent robotState -> updateView,                             // R-consoleUpdate
        whenMsg bag -> handlePhoto
        finally repeatPlan

    State adaptCommand resumeLastPlan [
        printCurrentEvent;
        onEvent usercmd: usercmd(robotgui(cmd(explore))) ->
            forward robot_discovery_mind -m cmdExplore: cmdExplore;
        onEvent usercmd: usercmd(robotgui(cmd(halt))) ->
            forward robot_discovery_mind -m cmdStop: cmdStop;
        onEvent usercmd: usercmd(robotgui(cmd(home))) ->
            forward robot_discovery_mind -m cmdGoHome: cmdGoHome;
        onEvent usercmd: usercmd(robotgui(bagStatus(bomb))) ->
            selfMsg bagStatus: bagStatus(bomb, args(picture(nothing)));
        onEvent usercmd: usercmd(robotgui(bagStatus(bag))) ->
            selfMsg bagStatus: bagStatus(bag, args(nothing))
    ]

    State handlePhoto [
        onMsg bag: bag(picture(X)) -> printCurrentMessage
    ] transition
        stopAfter 60000
        whenMsg bagStatus -> handleBagStatus,
        whenEvent usercmd -> adaptCommand
        finally repeatPlan

    State handleBagStatus [
        onMsg bagStatus: bagStatus(bomb, args(picture(X))) -> {
            // TODO implement save X                                    // R-storePhoto
            forward robot_discovery_mind -m cmdGoHome: cmdGoHome;       // R-backHomeSinceBomb
            selfMsg alert: alert                                        // R-alert
        };
        onMsg bagStatus: bagStatus(bag, Y) ->
            forward robot_discovery_mind -m cmdExplore: cmdExplore      // R-continueExploreAfterPhoto
    ] transition
        whenTime 3000 -> doWork
        whenMsg alert -> handleAlert

    State handleAlert []
    transition
        whenTime 3000 -> handleAlert
        whenMsg robotHome: robotHome do
            forward robot_retriever_mind -m cmdReachBomb: cmdReachBomb  // R-waitForHome & R-reachBag

    State updateView resumeLastPlan [
        onMsg robotState: state(X) -> printCurrentMessage
    ]
}
